/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:08:51 GMT 2018
 */

package system.model.classes.questions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import system.model.classes.questions.QuestionGroup;
import system.model.classes.questions.QuestionGroupType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroup_ESTest extends QuestionGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("");
      QuestionGroup questionGroup1 = new QuestionGroup(questionGroup0);
      assertNull(questionGroup1.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("BKfku~QV/aU]*X+");
      questionGroup0.getType();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("_->J;/q~Fl;<");
      String string0 = questionGroup0.getTeacher();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("", "", questionGroupType0, "", "", "");
      String string0 = questionGroup0.getTeacher();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("");
      String string0 = questionGroup0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("k-XQS~{Mh)DMv~*.1,", "k-XQS~{Mh)DMv~*.1,", questionGroupType0, "k-XQS~{Mh)DMv~*.1,", "", "");
      String string0 = questionGroup0.getName();
      assertEquals("k-XQS~{Mh)DMv~*.1,", questionGroup0.getId());
      assertEquals("", string0);
      assertEquals("", questionGroup0.getGrandfather());
      assertEquals("k-XQS~{Mh)DMv~*.1,", questionGroup0.getTeacher());
      assertEquals("k-XQS~{Mh)DMv~*.1,", questionGroup0.getFather());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup((String) null);
      String string0 = questionGroup0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("_->J;/q~Fl;<");
      String string0 = questionGroup0.getId();
      assertEquals("_->J;/q~Fl;<", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("C_I_@rYGk");
      questionGroup0.setGrandfather("C_I_@rYGk");
      String string0 = questionGroup0.getGrandfather();
      assertEquals("C_I_@rYGk", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("");
      questionGroup0.setGrandfather("");
      String string0 = questionGroup0.getGrandfather();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("_->J;/q~Fl;<");
      String string0 = questionGroup0.getFather();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("C_I_@rYGk");
      questionGroup0.setFather("CAT");
      String string0 = questionGroup0.getFather();
      assertEquals("CAT", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("gVY\"FE^Rl", "system.model.classes.questions.QuestionGroup", questionGroupType0, "system.model.classes.questions.QuestionGroupType", "system.model.classes.questions.QuestionGroupType", "{r5K|$o'XB=@");
      questionGroup0.getType();
      assertEquals("{r5K|$o'XB=@", questionGroup0.getName());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getGrandfather());
      assertEquals("gVY\"FE^Rl", questionGroup0.getId());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getFather());
      assertEquals("system.model.classes.questions.QuestionGroup", questionGroup0.getTeacher());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("gVY\"FE^Rl", "system.model.classes.questions.QuestionGroup", questionGroupType0, "system.model.classes.questions.QuestionGroupType", "system.model.classes.questions.QuestionGroupType", "{r5K|$o'XB=@");
      String string0 = questionGroup0.getName();
      assertEquals("system.model.classes.questions.QuestionGroup", questionGroup0.getTeacher());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getGrandfather());
      assertEquals("{r5K|$o'XB=@", string0);
      assertEquals("gVY\"FE^Rl", questionGroup0.getId());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getFather());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionGroup questionGroup0 = null;
      try {
        questionGroup0 = new QuestionGroup((QuestionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.questions.QuestionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("gVY\"FE^Rl", "system.model.classes.questions.QuestionGroup", questionGroupType0, "system.model.classes.questions.QuestionGroupType", "system.model.classes.questions.QuestionGroupType", "{r5K|$o'XB=@");
      questionGroup0.setType(questionGroupType0);
      assertEquals("gVY\"FE^Rl", questionGroup0.getId());
      assertEquals("system.model.classes.questions.QuestionGroup", questionGroup0.getTeacher());
      assertEquals("{r5K|$o'XB=@", questionGroup0.getName());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getGrandfather());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getFather());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("_->J;/q~Fl;<");
      questionGroup0.setName("_->J;/q~Fl;<");
      assertNull(questionGroup0.getFather());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("gVY\"FE^Rl", "system.model.classes.questions.QuestionGroup", questionGroupType0, "system.model.classes.questions.QuestionGroupType", "system.model.classes.questions.QuestionGroupType", "{r5K|$o'XB=@");
      assertEquals("system.model.classes.questions.QuestionGroup", questionGroup0.getTeacher());
      
      questionGroup0.setTeacher("system.model.classes.questions.QuestionGroupType");
      assertEquals("gVY\"FE^Rl", questionGroup0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("");
      String string0 = questionGroup0.getGrandfather();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("", "V_y_Kl", questionGroupType0, "", "V_y_Kl", "SUBSUBCAT");
      String string0 = questionGroup0.getTeacher();
      assertEquals("SUBSUBCAT", questionGroup0.getName());
      assertEquals("", questionGroup0.getFather());
      assertEquals("V_y_Kl", questionGroup0.getGrandfather());
      assertEquals("", questionGroup0.getId());
      assertEquals("V_y_Kl", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = new QuestionGroup("gVY\"FE^Rl", "system.model.classes.questions.QuestionGroup", questionGroupType0, "system.model.classes.questions.QuestionGroupType", "system.model.classes.questions.QuestionGroupType", "{r5K|$o'XB=@");
      assertEquals("gVY\"FE^Rl", questionGroup0.getId());
      
      questionGroup0.setId("gVY\"FE^Rl");
      assertEquals("{r5K|$o'XB=@", questionGroup0.getName());
      assertEquals("system.model.classes.questions.QuestionGroup", questionGroup0.getTeacher());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getFather());
      assertEquals("system.model.classes.questions.QuestionGroupType", questionGroup0.getGrandfather());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup("");
      String string0 = questionGroup0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuestionGroupType questionGroupType0 = QuestionGroupType.CAT;
      QuestionGroup questionGroup0 = new QuestionGroup("", questionGroupType0, "", "", "");
      String string0 = questionGroup0.getFather();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuestionGroup questionGroup0 = new QuestionGroup();
      assertNull(questionGroup0.getGrandfather());
  }
}
