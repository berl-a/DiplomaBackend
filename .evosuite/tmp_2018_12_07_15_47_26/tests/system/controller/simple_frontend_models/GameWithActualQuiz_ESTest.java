/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:26:34 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.model.classes.games.Game;
import system.model.classes.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameWithActualQuiz_ESTest extends GameWithActualQuiz_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Game game0 = mock(Game.class, new ViolatedAssumptionAnswer());
      GameWithActualQuiz gameWithActualQuiz0 = new GameWithActualQuiz(game0, (Quiz) null);
      Quiz quiz0 = gameWithActualQuiz0.getActualQuiz();
      assertNull(quiz0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Game game0 = mock(Game.class, new ViolatedAssumptionAnswer());
      GameWithActualQuiz gameWithActualQuiz0 = new GameWithActualQuiz(game0, (Quiz) null);
      gameWithActualQuiz0.setActualQuiz((Quiz) null);
      assertNull(gameWithActualQuiz0.getId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      GameWithActualQuiz gameWithActualQuiz0 = null;
      try {
        gameWithActualQuiz0 = new GameWithActualQuiz((Game) null, quiz0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.games.Game", e);
      }
  }
}
