/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:12:47 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.GameController;
import system.controller.service.GameService;
import system.controller.service.PlayerService;
import system.controller.service.QuizService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.Response;
import system.model.classes.games.Player;
import system.model.classes.questions.QuestionType;
import system.model.classes.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameController_ESTest extends GameController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(4113L, (-477L)).when(gameWithActualQuiz0).getFullTime();
      doReturn(",").when(gameWithActualQuiz0).getName();
      doReturn((-838L), 2978L).when(gameWithActualQuiz0).getStartTime();
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz1).getFullTime();
      doReturn(0L).when(gameWithActualQuiz1).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(gameService0).answerQuestion(anyString() , anyString() , anyString() , any(system.model.classes.games.Answer.class));
      doReturn(gameWithActualQuiz0, gameWithActualQuiz1).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.getGameInfo("2(d&'NL{*:lYbZzOE3");
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response1 = gameController0.answerQuestion("system.model.dao.QuestionDao", "2(d&'NL{*:lYbZzOE3", "nok", questionType0, "nok");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn(player0).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((long)60000).when(gameWithActualQuiz0).getFullTime();
      doReturn((long)1000).when(gameWithActualQuiz0).getStartTime();
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz1).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      doReturn(",U").when(gameService0).join(anyString() , anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.add(":}{~cQ6", "time_left");
      assertNotNull(response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.setFullTime("", 2870L);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.waitForPlayerJoin((LinkedList<String>) null, "Part: ", "Part: ");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.getByCode("HEAD");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response2 = gameController0.setFullTime("-\"g]lIXx|w9jzl", 4);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response3 = gameController0.add("");
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotNull(response3);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string0 = "";
      Response response4 = gameController0.add("");
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertNotNull(response4);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string1 = "system.model.dao.PlayerDao";
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      Response response5 = gameController0.answerQuestion("system.model.dao.PlayerDao", "system.model.dao.PlayerDao", "system.model.dao.PlayerDao", questionType0, "Q>Eb\"E\"}:5Gz");
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response1));
      assertFalse(response5.equals((Object)response0));
      assertNotNull(response5);
      assertNotSame(response5, response3);
      assertNotSame(response5, response2);
      assertNotSame(response5, response4);
      assertNotSame(response5, response1);
      assertNotSame(response5, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response6 = gameController0.getAll();
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response1));
      assertNotNull(response6);
      assertNotSame(response6, response4);
      assertNotSame(response6, response3);
      assertNotSame(response6, response2);
      assertNotSame(response6, response0);
      assertNotSame(response6, response5);
      assertNotSame(response6, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response7 = gameController0.waitForGameStart(")", ")");
      assertFalse(response7.equals((Object)response4));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response2));
      assertNotNull(response7);
      assertNotSame(response7, response4);
      assertNotSame(response7, response3);
      assertNotSame(response7, response0);
      assertNotSame(response7, response6);
      assertNotSame(response7, response1);
      assertNotSame(response7, response5);
      assertNotSame(response7, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).addGameFromQuiz(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.add((String) null);
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      gameController0.quizService = null;
      String string0 = "z}#x9tJ:";
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      // Undeclared exception!
      try { 
        gameController0.answerQuestion("z}#x9tJ:", "z}#x9tJ:", "z}#x9tJ:", questionType0, "wrong teacher id");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wrong teacher id\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(gameWithActualQuiz0).getFullTime();
      doReturn((String) null).when(gameWithActualQuiz0).getName();
      doReturn(0L, 0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.getGameInfo("2(d&'NL{*:lYbZzOE3");
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response1 = gameController0.answerQuestion("system.model.dao.QuestionDao", "2(d&'NL{*:lYbZzOE3", "nok", questionType0, "nok");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quiz0).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((long)30000).when(gameWithActualQuiz0).getStartTime();
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gameWithActualQuiz1).getQuiz();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz1).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.endGame("server_time");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      // Undeclared exception!
      try { 
        gameController0.startGame("", "", 4, "system.controller.GameController");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameController gameController1 = new GameController();
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotNull(gameController1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService1).getByCode(anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController1.add("HEAD", "HEAD");
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotNull(response0);
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService2 = gameController1.quizService;
      assertFalse(quizService2.equals((Object)quizService0));
      assertNotNull(quizService2);
      assertSame(quizService2, quizService1);
      assertNotSame(quizService2, quizService0);
      
      gameController0.quizService = quizService2;
      String string0 = "{rc;izc";
      Response response1 = gameController0.getByCode("{rc;izc");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response1, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response2 = gameController0.getAll();
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string1 = null;
      Response response3 = gameController0.add((String) null);
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotNull(response3);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response4 = gameController0.getGameInfo((String) null);
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response5 = gameController0.add((String) null);
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response1));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response0));
      assertNotNull(response5);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response5, response4);
      assertNotSame(response5, response1);
      assertNotSame(response5, response2);
      assertNotSame(response5, response3);
      assertNotSame(response5, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response6 = gameController0.waitForGameStart("{rc;izc", "");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response1));
      assertNotNull(response6);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response6, response4);
      assertNotSame(response6, response5);
      assertNotSame(response6, response2);
      assertNotSame(response6, response3);
      assertNotSame(response6, response0);
      assertNotSame(response6, response1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      // Undeclared exception!
      try { 
        gameController0.remove("{rc;izc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuestionType questionType0 = QuestionType.SINGLE_CHOICE;
      // Undeclared exception!
      try { 
        gameController0.answerQuestion("system.controller.simple_frontend_models.Response", "game", "5FEiYrAD)G:ZEu", questionType0, (String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      // Undeclared exception!
      try { 
        gameController0.answerQuestion("", "", "", questionType0, "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.add("qg=j`~kAOBz", "qg=j`~kAOBz");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.get(";''W4VfE%:h!MkJ");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).addGameFromQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService1 = gameController0.service;
      assertNotNull(gameService1);
      assertSame(gameService1, gameService0);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertEquals(4, GameService.CODE_LENGTH);
      
      gameController0.service = gameService1;
      Response response0 = gameController0.add("");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null, (Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameController gameController1 = new GameController();
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotNull(gameController1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gameWithActualQuiz0).getQuiz();
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0, gameWithActualQuiz0, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getByCode(anyString());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0).when(gameService1).getWithQuiz(anyString());
      doReturn((String) null, (String) null).when(gameService1).join(anyString() , anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService2 = gameController1.service;
      assertFalse(gameService2.equals((Object)gameService0));
      assertNotNull(gameService2);
      assertSame(gameService2, gameService1);
      assertNotSame(gameService2, gameService0);
      assertEquals(4, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      
      gameController0.service = gameService2;
      Response response0 = gameController0.add("system.model.classes.quizzes.QuizGroup", "system.model.classes.quizzes.QuizGroup");
      assertFalse(gameController0.equals((Object)gameController1));
      assertNotNull(response0);
      assertNotSame(gameController0, gameController1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response1 = gameController0.endGame("system.controller.service.QuizGroupService");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response2 = gameController0.add("system.controller.service.QuizGroupService", "system.model.classes.quizzes.QuizGroup");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response3 = gameController0.getByCode("ho");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotNull(response3);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      // Undeclared exception!
      try { 
        gameController0.startGame("=p4HdKz", "system.controller.service.QuizGroupService", 4, "ho");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getByCode(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.getByCode("");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gameWithActualQuiz0).getQuiz();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      // Undeclared exception!
      try { 
        gameController0.startGame("i|ci5B", "", 3833, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn("KY").when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.setFullTime("KY", 100);
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response1 = gameController0.remove("system.controller.GameController");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      gameController0.service = null;
      // Undeclared exception!
      try { 
        gameController0.add("9'>,N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService1 = gameController0.quizService;
      assertNotNull(quizService1);
      assertSame(quizService1, quizService0);
      
      gameController0.quizService = quizService1;
      Response response0 = gameController0.add("not found", "lIX0qM5\"{;#)'C0Q");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService1 = gameController0.service;
      assertNotNull(gameService1);
      assertSame(gameService1, gameService0);
      assertEquals(4, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      
      gameController0.service = gameService1;
      Response response1 = gameController0.setFullTime("", 1044L);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      gameController0.service = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        gameController0.endGame("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string0 = "";
      Response response0 = gameController0.setFullTime("", 100);
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService1 = gameController0.quizService;
      assertNotNull(quizService1);
      assertSame(quizService1, quizService0);
      
      gameController0.quizService = quizService1;
      PlayerService playerService1 = gameController0.playerService;
      assertNotNull(playerService1);
      assertSame(playerService1, playerService0);
      
      gameController0.playerService = playerService1;
      String string1 = "";
      Response response1 = gameController0.setFullTime("", 0L);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string2 = null;
      Response response2 = gameController0.getGameInfo((String) null);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      // Undeclared exception!
      try { 
        gameController0.add((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameController gameController1 = new GameController();
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotNull(gameController1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(gameService1).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService1).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getWithQuiz(anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService2 = gameController1.service;
      assertFalse(gameService2.equals((Object)gameService0));
      assertNotNull(gameService2);
      assertSame(gameService2, gameService1);
      assertNotSame(gameService2, gameService0);
      assertEquals(4, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      
      gameController0.service = gameService2;
      QuizService quizService2 = gameController0.quizService;
      assertFalse(quizService2.equals((Object)quizService1));
      assertNotNull(quizService2);
      assertNotSame(quizService2, quizService1);
      assertSame(quizService2, quizService0);
      
      gameController0.quizService = quizService2;
      Response response0 = gameController0.getAll();
      assertFalse(gameController0.equals((Object)gameController1));
      assertNotNull(response0);
      assertNotSame(gameController0, gameController1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService3 = gameController0.quizService;
      assertFalse(quizService3.equals((Object)quizService1));
      assertNotNull(quizService3);
      assertSame(quizService3, quizService0);
      assertNotSame(quizService3, quizService1);
      assertSame(quizService3, quizService2);
      
      gameController0.quizService = quizService3;
      Response response1 = gameController0.getAll();
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response2 = gameController0.waitForPlayerJoin((LinkedList<String>) null, "system.model.classes.questions.QuestionType", "system.model.classes.questions.QuestionType");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response3 = gameController0.startGame("", "system.model.classes.questions.QuestionType", 3556, "system.model.classes.questions.QuestionType");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertNotNull(response3);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response4 = gameController0.add("", "");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertNotNull(response4);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response4, response3);
      assertNotSame(response4, response2);
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.get("'I!h]_(].4 L\"E#,icm");
      assertNotNull(response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.setFullTime("st$sR]g9m{e@8", (-1155L));
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response2 = gameController0.getGameInfo("server_time");
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response3 = gameController0.endGame("a?*^");
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response4 = gameController0.waitForPlayerJoin((LinkedList<String>) null, "server_time", "");
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertNotNull(response4);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response5 = gameController0.waitForGameStart("", "a?*^");
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response1));
      assertNotNull(response5);
      assertNotSame(response5, response0);
      assertNotSame(response5, response2);
      assertNotSame(response5, response3);
      assertNotSame(response5, response4);
      assertNotSame(response5, response1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response6 = gameController0.add("server_time");
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response0));
      assertNotNull(response6);
      assertNotSame(response6, response5);
      assertNotSame(response6, response3);
      assertNotSame(response6, response2);
      assertNotSame(response6, response4);
      assertNotSame(response6, response1);
      assertNotSame(response6, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response7 = gameController0.waitForPlayerJoin((LinkedList<String>) null, "R&WJHc.F'W||G", "st$sR]g9m{e@8");
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response4));
      assertNotNull(response7);
      assertNotSame(response7, response1);
      assertNotSame(response7, response0);
      assertNotSame(response7, response3);
      assertNotSame(response7, response6);
      assertNotSame(response7, response2);
      assertNotSame(response7, response5);
      assertNotSame(response7, response4);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.endGame("U4x");
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService1 = gameController0.service;
      assertNotNull(gameService1);
      assertSame(gameService1, gameService0);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertEquals(4, GameService.CODE_LENGTH);
      
      gameController0.service = gameService1;
      Response response1 = gameController0.waitForGameStart("J/p)KV\"B{pN7", "J/p)KV\"B{pN7");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response2 = gameController0.endGame("start_time");
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response3 = gameController0.getByCode("");
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertNotSame(response3, response2);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response4 = gameController0.endGame("");
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response3));
      assertNotNull(response4);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotSame(response4, response0);
      assertNotSame(response4, response3);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response5 = gameController0.add("'~uSL\"v_5I", "'~uSL\"v_5I");
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response1));
      assertNotNull(response5);
      assertNotSame(response5, response0);
      assertNotSame(response5, response2);
      assertNotSame(response5, response3);
      assertNotSame(response5, response4);
      assertNotSame(response5, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response6 = gameController0.add("HEAD", "HEAD");
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response3));
      assertNotNull(response6);
      assertNotSame(response6, response5);
      assertNotSame(response6, response1);
      assertNotSame(response6, response4);
      assertNotSame(response6, response2);
      assertNotSame(response6, response0);
      assertNotSame(response6, response3);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response7 = gameController0.waitForGameStart("HEAD", "HEAD");
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response4));
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response6));
      assertNotNull(response7);
      assertNotSame(response7, response1);
      assertNotSame(response7, response2);
      assertNotSame(response7, response5);
      assertNotSame(response7, response4);
      assertNotSame(response7, response0);
      assertNotSame(response7, response3);
      assertNotSame(response7, response6);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response8 = gameController0.startGame("HEAD", "HEAD", 0, "HEAD");
      assertFalse(response8.equals((Object)response1));
      assertFalse(response8.equals((Object)response2));
      assertFalse(response8.equals((Object)response0));
      assertFalse(response8.equals((Object)response7));
      assertFalse(response8.equals((Object)response6));
      assertFalse(response8.equals((Object)response3));
      assertFalse(response8.equals((Object)response5));
      assertFalse(response8.equals((Object)response4));
      assertNotNull(response8);
      assertNotSame(response8, response1);
      assertNotSame(response8, response2);
      assertNotSame(response8, response0);
      assertNotSame(response8, response7);
      assertNotSame(response8, response6);
      assertNotSame(response8, response3);
      assertNotSame(response8, response5);
      assertNotSame(response8, response4);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response9 = gameController0.endGame("g?Zn|{~I");
      assertFalse(response9.equals((Object)response1));
      assertFalse(response9.equals((Object)response2));
      assertFalse(response9.equals((Object)response0));
      assertFalse(response9.equals((Object)response7));
      assertFalse(response9.equals((Object)response6));
      assertFalse(response9.equals((Object)response8));
      assertFalse(response9.equals((Object)response4));
      assertFalse(response9.equals((Object)response3));
      assertFalse(response9.equals((Object)response5));
      assertNotNull(response9);
      assertNotSame(response9, response1);
      assertNotSame(response9, response2);
      assertNotSame(response9, response0);
      assertNotSame(response9, response7);
      assertNotSame(response9, response6);
      assertNotSame(response9, response8);
      assertNotSame(response9, response4);
      assertNotSame(response9, response3);
      assertNotSame(response9, response5);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response10 = gameController0.add("", "");
      assertFalse(response10.equals((Object)response8));
      assertFalse(response10.equals((Object)response9));
      assertFalse(response10.equals((Object)response3));
      assertFalse(response10.equals((Object)response5));
      assertFalse(response10.equals((Object)response4));
      assertFalse(response10.equals((Object)response2));
      assertFalse(response10.equals((Object)response1));
      assertFalse(response10.equals((Object)response0));
      assertFalse(response10.equals((Object)response6));
      assertFalse(response10.equals((Object)response7));
      assertNotNull(response10);
      assertNotSame(response10, response8);
      assertNotSame(response10, response9);
      assertNotSame(response10, response3);
      assertNotSame(response10, response5);
      assertNotSame(response10, response4);
      assertNotSame(response10, response2);
      assertNotSame(response10, response1);
      assertNotSame(response10, response0);
      assertNotSame(response10, response6);
      assertNotSame(response10, response7);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response11 = gameController0.waitForGameStart("HEAD", "'~uSL\"v_5I");
      assertFalse(response11.equals((Object)response8));
      assertFalse(response11.equals((Object)response9));
      assertFalse(response11.equals((Object)response3));
      assertFalse(response11.equals((Object)response4));
      assertFalse(response11.equals((Object)response7));
      assertFalse(response11.equals((Object)response6));
      assertFalse(response11.equals((Object)response1));
      assertFalse(response11.equals((Object)response2));
      assertFalse(response11.equals((Object)response0));
      assertFalse(response11.equals((Object)response10));
      assertFalse(response11.equals((Object)response5));
      assertNotNull(response11);
      assertNotSame(response11, response8);
      assertNotSame(response11, response9);
      assertNotSame(response11, response3);
      assertNotSame(response11, response4);
      assertNotSame(response11, response7);
      assertNotSame(response11, response6);
      assertNotSame(response11, response1);
      assertNotSame(response11, response2);
      assertNotSame(response11, response0);
      assertNotSame(response11, response10);
      assertNotSame(response11, response5);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response12 = gameController0.getByCode("start_time");
      assertFalse(response12.equals((Object)response10));
      assertFalse(response12.equals((Object)response11));
      assertFalse(response12.equals((Object)response7));
      assertFalse(response12.equals((Object)response2));
      assertFalse(response12.equals((Object)response0));
      assertFalse(response12.equals((Object)response5));
      assertFalse(response12.equals((Object)response3));
      assertFalse(response12.equals((Object)response4));
      assertFalse(response12.equals((Object)response8));
      assertFalse(response12.equals((Object)response9));
      assertFalse(response12.equals((Object)response1));
      assertFalse(response12.equals((Object)response6));
      assertNotNull(response12);
      assertNotSame(response12, response10);
      assertNotSame(response12, response11);
      assertNotSame(response12, response7);
      assertNotSame(response12, response2);
      assertNotSame(response12, response0);
      assertNotSame(response12, response5);
      assertNotSame(response12, response3);
      assertNotSame(response12, response4);
      assertNotSame(response12, response8);
      assertNotSame(response12, response9);
      assertNotSame(response12, response1);
      assertNotSame(response12, response6);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response13 = gameController0.add("V0O12i", "start_time");
      assertFalse(response13.equals((Object)response11));
      assertFalse(response13.equals((Object)response4));
      assertFalse(response13.equals((Object)response5));
      assertFalse(response13.equals((Object)response12));
      assertFalse(response13.equals((Object)response8));
      assertFalse(response13.equals((Object)response0));
      assertFalse(response13.equals((Object)response10));
      assertFalse(response13.equals((Object)response2));
      assertFalse(response13.equals((Object)response6));
      assertFalse(response13.equals((Object)response3));
      assertFalse(response13.equals((Object)response1));
      assertFalse(response13.equals((Object)response7));
      assertFalse(response13.equals((Object)response9));
      assertNotNull(response13);
      assertNotSame(response13, response11);
      assertNotSame(response13, response4);
      assertNotSame(response13, response5);
      assertNotSame(response13, response12);
      assertNotSame(response13, response8);
      assertNotSame(response13, response0);
      assertNotSame(response13, response10);
      assertNotSame(response13, response2);
      assertNotSame(response13, response6);
      assertNotSame(response13, response3);
      assertNotSame(response13, response1);
      assertNotSame(response13, response7);
      assertNotSame(response13, response9);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response14 = gameController0.getByCode("");
      assertFalse(response14.equals((Object)response11));
      assertFalse(response14.equals((Object)response13));
      assertFalse(response14.equals((Object)response9));
      assertFalse(response14.equals((Object)response7));
      assertFalse(response14.equals((Object)response6));
      assertFalse(response14.equals((Object)response0));
      assertFalse(response14.equals((Object)response2));
      assertFalse(response14.equals((Object)response10));
      assertFalse(response14.equals((Object)response12));
      assertFalse(response14.equals((Object)response8));
      assertFalse(response14.equals((Object)response1));
      assertFalse(response14.equals((Object)response3));
      assertFalse(response14.equals((Object)response4));
      assertFalse(response14.equals((Object)response5));
      assertNotNull(response14);
      assertNotSame(response14, response11);
      assertNotSame(response14, response13);
      assertNotSame(response14, response9);
      assertNotSame(response14, response7);
      assertNotSame(response14, response6);
      assertNotSame(response14, response0);
      assertNotSame(response14, response2);
      assertNotSame(response14, response10);
      assertNotSame(response14, response12);
      assertNotSame(response14, response8);
      assertNotSame(response14, response1);
      assertNotSame(response14, response3);
      assertNotSame(response14, response4);
      assertNotSame(response14, response5);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      // Undeclared exception!
      try { 
        gameController0.remove("J/p)KV\"B{pN7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.waitForPlayerJoin((LinkedList<String>) null, (String) null, (String) null);
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.add("");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response2 = gameController0.endGame("LN]iq=");
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.getAll();
      assertNotNull(response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getFullTime();
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).join(anyString() , anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.waitForGameStart("", "1fgh0I{:.*]tX");
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService1 = gameController0.quizService;
      assertNotNull(quizService1);
      assertSame(quizService1, quizService0);
      
      gameController0.quizService = quizService1;
      Response response1 = gameController0.add("not found", "not found");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string0 = "";
      Response response2 = gameController0.waitForGameStart("", (String) null);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string1 = "f,l1'xGK-94";
      Response response3 = gameController0.setFullTime("f,l1'xGK-94", 100);
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotNull(response3);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameController gameController1 = new GameController();
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotNull(gameController1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getWithQuiz(anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      assertFalse(gameController1.equals((Object)gameController0));
      assertNotSame(gameController1, gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService2 = gameController1.service;
      assertFalse(gameService2.equals((Object)gameService0));
      assertNotNull(gameService2);
      assertSame(gameService2, gameService1);
      assertNotSame(gameService2, gameService0);
      assertEquals(4, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      
      gameController0.service = gameService2;
      Response response0 = gameController0.add("system.model.classes.quizzes.QuizGroup", "system.model.classes.quizzes.QuizGroup");
      assertFalse(gameController0.equals((Object)gameController1));
      assertNotNull(response0);
      assertNotSame(gameController0, gameController1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response1 = gameController0.endGame("system.controller.service.QuizGroupService");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response2 = gameController0.getByCode("=p4HdKz");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response3 = gameController0.getByCode("ho");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response4 = gameController0.startGame("=p4HdKz", "system.controller.service.QuizGroupService", 4, "ho");
      assertFalse(gameController0.equals((Object)gameController1));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
      assertNotSame(gameController0, gameController1);
      assertNotSame(response4, response1);
      assertNotSame(response4, response0);
      assertNotSame(response4, response3);
      assertNotSame(response4, response2);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).addGameFromQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService1 = gameController0.quizService;
      assertNotNull(quizService1);
      assertSame(quizService1, quizService0);
      
      gameController0.quizService = quizService1;
      Response response0 = gameController0.add("&5X[Lwev!BLqe");
      assertNotNull(response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      System.setCurrentTimeMillis((-774L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((LinkedList) null, (LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService1 = gameController0.playerService;
      assertNotNull(playerService1);
      assertSame(playerService1, playerService0);
      
      gameController0.playerService = playerService1;
      Response response0 = gameController0.add("");
      assertNotNull(response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string0 = "g\\RAj";
      Response response1 = gameController0.startGame("gRAj", "gRAj", 100, "gRAj");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string1 = null;
      Response response2 = gameController0.setFullTime((String) null, 100);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService1 = gameController0.service;
      assertNotNull(gameService1);
      assertSame(gameService1, gameService0);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertEquals(4, GameService.CODE_LENGTH);
      
      gameController0.service = gameService1;
      String string2 = "";
      String string3 = "system.model.classes.games.Game";
      Response response3 = gameController0.add("", "system.model.classes.games.Game");
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertNotNull(response3);
      assertNotSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response4 = gameController0.getAll();
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
      assertNotSame(response4, response0);
      assertNotSame(response4, response3);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response5 = gameController0.getGameInfo("JmB5m`M47!78si.ZiQH");
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response1));
      assertNotNull(response5);
      assertNotSame(response5, response2);
      assertNotSame(response5, response0);
      assertNotSame(response5, response4);
      assertNotSame(response5, response3);
      assertNotSame(response5, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string4 = "full_time";
      Response response6 = gameController0.getByCode("full_time");
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response1));
      assertNotNull(response6);
      assertNotSame(response6, response0);
      assertNotSame(response6, response4);
      assertNotSame(response6, response2);
      assertNotSame(response6, response3);
      assertNotSame(response6, response5);
      assertNotSame(response6, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      String string5 = "system.model.classes.games.Player";
      Response response7 = gameController0.add("system.model.classes.games.Player");
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response4));
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response1));
      assertNotNull(response7);
      assertNotSame(response7, response6);
      assertNotSame(response7, response0);
      assertNotSame(response7, response4);
      assertNotSame(response7, response2);
      assertNotSame(response7, response5);
      assertNotSame(response7, response3);
      assertNotSame(response7, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response8 = gameController0.getAll();
      assertFalse(response8.equals((Object)response7));
      assertFalse(response8.equals((Object)response0));
      assertFalse(response8.equals((Object)response3));
      assertFalse(response8.equals((Object)response1));
      assertFalse(response8.equals((Object)response2));
      assertFalse(response8.equals((Object)response6));
      assertFalse(response8.equals((Object)response4));
      assertFalse(response8.equals((Object)response5));
      assertNotNull(response8);
      assertNotSame(response8, response7);
      assertNotSame(response8, response0);
      assertNotSame(response8, response3);
      assertNotSame(response8, response1);
      assertNotSame(response8, response2);
      assertNotSame(response8, response6);
      assertNotSame(response8, response4);
      assertNotSame(response8, response5);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response9 = gameController0.endGame("(ung");
      assertFalse(response9.equals((Object)response2));
      assertFalse(response9.equals((Object)response7));
      assertFalse(response9.equals((Object)response1));
      assertFalse(response9.equals((Object)response5));
      assertFalse(response9.equals((Object)response3));
      assertFalse(response9.equals((Object)response8));
      assertFalse(response9.equals((Object)response6));
      assertFalse(response9.equals((Object)response0));
      assertFalse(response9.equals((Object)response4));
      assertNotNull(response9);
      assertNotSame(response9, response2);
      assertNotSame(response9, response7);
      assertNotSame(response9, response1);
      assertNotSame(response9, response5);
      assertNotSame(response9, response3);
      assertNotSame(response9, response8);
      assertNotSame(response9, response6);
      assertNotSame(response9, response0);
      assertNotSame(response9, response4);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      // Undeclared exception!
      try { 
        gameController0.remove("system.model.classes.games.Player");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.waitForGameStart("%.5F4X8]", "%.5F4X8]");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response1 = gameController0.setFullTime("eD", 4);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response2 = gameController0.get("full_time");
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuestionType questionType0 = QuestionType.SINGLE_CHOICE;
      Response response3 = gameController0.answerQuestion("POST", "", "OSvDRB}T2$lPp;dK", questionType0, "");
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService1 = gameController0.service;
      assertNotNull(gameService1);
      assertSame(gameService1, gameService0);
      assertEquals(4, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      
      gameController0.service = gameService1;
      Response response4 = gameController0.get("f)");
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
      assertNotSame(response4, response3);
      assertNotSame(response4, response1);
      assertNotSame(response4, response0);
      assertNotSame(response4, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuestionType questionType1 = QuestionType.FREE_TEXT;
      Response response5 = gameController0.answerQuestion("f)", "", "f)", questionType1, "XzN^+7%9:=0X9 +G%");
      assertFalse(questionType1.equals((Object)questionType0));
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response1));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response2));
      assertNotNull(response5);
      assertNotSame(questionType1, questionType0);
      assertNotSame(response5, response0);
      assertNotSame(response5, response1);
      assertNotSame(response5, response3);
      assertNotSame(response5, response4);
      assertNotSame(response5, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response6 = gameController0.endGame("");
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response2));
      assertNotNull(response6);
      assertNotSame(response6, response5);
      assertNotSame(response6, response3);
      assertNotSame(response6, response1);
      assertNotSame(response6, response0);
      assertNotSame(response6, response4);
      assertNotSame(response6, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response7 = gameController0.getAll();
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response4));
      assertNotNull(response7);
      assertNotSame(response7, response2);
      assertNotSame(response7, response5);
      assertNotSame(response7, response0);
      assertNotSame(response7, response1);
      assertNotSame(response7, response3);
      assertNotSame(response7, response6);
      assertNotSame(response7, response4);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertNotNull(gameController0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(gameWithActualQuiz0).getFullTime();
      doReturn((String) null).when(gameWithActualQuiz0).getName();
      doReturn(0L, 0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).join(anyString() , anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.getByCode("");
      assertNotNull(response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response1 = gameController0.add("W}?r:stV?h,Y4r<l", "8QAc7");
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response2 = gameController0.getGameInfo("W}?r:stV?h,Y4r<l");
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.waitForGameStart("PATCH", "PATCH");
      PlayerService playerService1 = gameController0.playerService;
      gameController0.playerService = playerService1;
      gameController0.getAll();
      Response response0 = gameController0.get("");
      gameController0.getAll();
      gameController0.endGame("");
      gameController0.add("", "\"G{xP6`Yn0t");
      Response response1 = gameController0.startGame((String) null, "$4+E}=J)0mF", 1, "\"G{xP6`Yn0t");
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getFullTime();
      doReturn(0L, 0L, 0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(gameService0).answerQuestion(anyString() , anyString() , anyString() , any(system.model.classes.games.Answer.class));
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0, gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response0 = gameController0.answerQuestion("aAZa'YDY*6Z=FW=f ", "mcyXx", ".gqW3Zj.ZE?qwE", questionType0, "");
      gameController0.endGame("");
      Response response1 = gameController0.endGame("");
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      Response response0 = gameController0.startGame((String) null, (String) null, 0, "Huy/#7WSQ@COKV),.>M");
      GameController gameController1 = new GameController();
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz1).getStartTime();
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz1, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getWithQuiz(anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      gameController1.endGame("");
      gameController1.setFullTime("KAv;KrXd- (v1:", 1000);
      gameController1.getGameInfo("");
      GameService gameService2 = gameController1.service;
      gameController0.service = gameService2;
      gameController0.getGameInfo("");
      gameController1.endGame("objects");
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response1 = gameController1.answerQuestion("", "PUT", (String) null, questionType0, "PUT");
      assertFalse(response1.equals((Object)response0));
  }
}
