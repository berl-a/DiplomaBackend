/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 14:58:24 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.InvalidPathException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.service.FilesService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilesService_ESTest extends FilesService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FilesService filesService0 = new FilesService();
      ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());
      doReturn("/WEB-INF/static/html/js").when(servletContext0).getRealPath(anyString());
      Injector.inject(filesService0, (Class<?>) FilesService.class, "servletContext", (Object) servletContext0);
      Injector.validateBean(filesService0, (Class<?>) FilesService.class);
      filesService0.replaceServerLocationInJsFiles();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FilesService filesService0 = new FilesService();
      ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());
      doReturn("127.0.0.1:80").when(servletContext0).getRealPath(anyString());
      Injector.inject(filesService0, (Class<?>) FilesService.class, "servletContext", (Object) servletContext0);
      Injector.validateBean(filesService0, (Class<?>) FilesService.class);
      // Undeclared exception!
      try { 
        filesService0.replaceServerLocationInJsFiles();
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FilesService filesService0 = new FilesService();
      ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletContext0).getRealPath(anyString());
      Injector.inject(filesService0, (Class<?>) FilesService.class, "servletContext", (Object) servletContext0);
      Injector.validateBean(filesService0, (Class<?>) FilesService.class);
      // Undeclared exception!
      try { 
        filesService0.replaceServerLocationInJsFiles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FilesService filesService0 = new FilesService();
          ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());
          doReturn("").when(servletContext0).getRealPath(anyString());
          Injector.inject(filesService0, (Class<?>) FilesService.class, "servletContext", (Object) servletContext0);
          Injector.validateBean(filesService0, (Class<?>) FilesService.class);
          // Undeclared exception!
          try { 
            filesService0.replaceServerLocationInJsFiles();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".evosuite\\best-tests\\system\\model\\classes\\users\\User_ESTest_scaffolding.java\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:295)
             // sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:162)
             // sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:225)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.write(Files.java:3292)
             // system.controller.service.FilesService.lambda$replaceServerLocationInJsFiles$1(FilesService.java:36)
             // java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
             // java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
             // java.util.Iterator.forEachRemaining(Iterator.java:116)
             // java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
             // java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
             // java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
             // system.controller.service.FilesService.replaceServerLocationInJsFiles(FilesService.java:29)
             // sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
