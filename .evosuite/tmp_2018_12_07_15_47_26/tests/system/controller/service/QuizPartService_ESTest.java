/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:24:41 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuizPartService;
import system.model.classes.quizzes.QuizPart;
import system.model.dao.QuizPartDao;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizPartService_ESTest extends QuizPartService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string0 = quizPartService0.remove("+FFcEn5n");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      LinkedList<QuizPart> linkedList0 = quizPartService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.copy("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.add((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("tvWn_#nRe'n>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.get("u(2/0W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }
}
