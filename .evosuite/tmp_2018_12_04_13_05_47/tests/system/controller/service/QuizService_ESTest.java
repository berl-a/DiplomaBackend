/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 12:12:12 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.dao.QuizDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuizGroupService;
import system.controller.service.QuizPartService;
import system.controller.service.QuizService;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.QuizPartWithCategoryNames;
import system.controller.simple_frontend_models.QuizWithCategoryNames;
import system.model.QuizGroupType;
import system.model.questions.Question;
import system.model.quizzes.Quiz;
import system.model.quizzes.QuizGroup;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizService_ESTest extends QuizService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      Object object0 = QuizService.__CLR4_1_21kj1kjjp8v565e.lambdaInc(1735, quiz0, 1735);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizService.__CLR4_1_21kj1kjjp8v565e quizService___CLR4_1_21kj1kjjp8v565e0 = new QuizService.__CLR4_1_21kj1kjjp8v565e();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNamesByTeacher("fu,");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", " ", " ", " ", " ");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNamesByTeacher(" ");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      LinkedList<Quiz> linkedList0 = quizService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      LinkedList<Quiz> linkedList1 = quizService0.getAll();
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      Quiz quiz1 = quizService0.get("W7WeU.tWUIx{`'0Hz~x");
      assertSame(quiz1, quiz0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      String string0 = quizService0.copy("W7WeU.tWUIx{`'0Hz~x");
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(quizPartService0).getAllFromQuiz(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      LinkedList<Quiz> linkedList1 = new LinkedList<Quiz>();
      String string0 = "l~02e]:)}n-ui";
      Quiz quiz0 = new Quiz();
      // Undeclared exception!
      try { 
        quizService0.appendQuizParts(quiz0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = new QuizDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizDao0, (Class<?>) QuizDao.class);
      // Undeclared exception!
      try { 
        quizDao0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Quiz quiz0 = new Quiz("", (String) null, "", "", "org.hibernate.tuple.UpdateTimestampGeneration", "W7WeU.tWUIx{`'0Hz~x");
      quizService0.add(quiz0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.removeQuizzesFromGroup("{+aC#]^A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      // Undeclared exception!
      try { 
        quizService0.remove("_/ZSVY/|&C0kY5B3v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      QuizDao quizDao1 = quizService0.dao;
      quizService0.dao = quizDao1;
      quizService0.dao = null;
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        quizService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.get("D!*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Quiz>) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.edit((Quiz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      doReturn("fu,").when(quizDao0).remove(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      String string0 = quizService0.remove("fu,");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "but number of questions from this part: ", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      String string0 = quizService0.add(quiz0);
      assertEquals("W7WeU.tWUIx{`'0Hz~x", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      LinkedList<Quiz> linkedList1 = quizService0.getAll();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      quizService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.get("C6e0q>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      LinkedList<QuizPart> linkedList1 = quiz0.getParts();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("", "ok", "", 2123, (-1944), "", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ZN|'t", "ok");
      quizPartWithCategoryNames0.setSubsubcategory("");
      linkedList1.add((QuizPart) quizPartWithCategoryNames0);
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Question>) null).when(questionGroupService0).getQuestionsFromGroupsFree(anyString() , anyString() , anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizPartService0).getAllFromQuiz(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.generateRealQuestions("W7WeU.tWUIx{`'0Hz~x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1944)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      LinkedList<QuizPart> linkedList1 = quiz0.getParts();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("", "ok", "", 2123, (-1944), "", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ZN|'t", "ok");
      linkedList1.add((QuizPart) quizPartWithCategoryNames0);
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Question>) null).when(questionGroupService0).getQuestionsFromGroupsFree(anyString() , anyString() , anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizPartService0).getAllFromQuiz(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.generateRealQuestions("W7WeU.tWUIx{`'0Hz~x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1944)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      LinkedList<QuizPart> linkedList1 = new LinkedList<QuizPart>();
      QuizPart quizPart0 = new QuizPart("ok", "hr!8z1", "hr!8z1", 135, 135, "2x,[oqV}/$&9i", "", "2x,[oqV}/$&9i");
      linkedList1.offer(quizPart0);
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupService0).getQuestionsFromGroupsFree(anyString() , anyString() , anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizPartService0).getAllFromQuiz(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.generateRealQuestions("W7WeU.tWUIx{`'0Hz~x");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 135
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      LinkedList<QuizPart> linkedList1 = quiz0.getParts();
      linkedList0.add(quiz0);
      QuizPart quizPart0 = new QuizPart();
      linkedList1.offerLast(quizPart0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Question>) null).when(questionGroupService0).getQuestionsFromGroupsFree(anyString() , anyString() , anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizPartService0).getAllFromQuiz(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      LinkedList<Question> linkedList2 = quizService0.generateRealQuestions("W7WeU.tWUIx{`'0Hz~x");
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", "org.springframework.\"ttp.HttpMethod", "org.springframework.\"ttp.HttpMethod", "system.controller.dao.QuestionDao", "fu|", "fu|");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("fu|", "fu|", quizGroupType0, "fu|", "system.controller.dao.QuestionDao", "fu|");
      linkedList1.add(quizGroup0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNames();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "system.controller.dao.QuestionDao", "fu|", "fu|");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupType quizGroupType0 = QuizGroupType.SUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("fu|", "n-GB<p 8ddbuS<(yT", quizGroupType0, "]", "4V:_Fc", "n-GB<p 8ddbuS<(yT");
      linkedList1.add(quizGroup0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNames();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupType quizGroupType0 = QuizGroupType.CAT;
      QuizGroup quizGroup0 = new QuizGroup("org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", quizGroupType0, "org.springframework.http.HttpMethod", "4qV:_Fc", "org.springframework.http.HttpMethod");
      linkedList1.add(quizGroup0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNames();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      LinkedList<QuizGroup> linkedList1 = new LinkedList<QuizGroup>();
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      List<QuizWithCategoryNames> list0 = quizService0.getAllWithCatNames();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz(" ", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod", "org.springframework.http.HttpMethod");
      linkedList0.add(quiz0);
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(quizDao0).getAll();
      doReturn("org.springframework.http.HttpMethod").when(quizDao0).remove(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      quizService0.removeQuizzesFromGroup("org.springframework.http.HttpMethod");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNamesByTeacher((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.generateRealQuestions("W7WeU.tWUIx{`'0Hz~x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      system.controller.service.QuizService quizService0 = new system.controller.service.QuizService();
      LinkedList<Quiz> linkedList0 = new LinkedList<Quiz>();
      Quiz quiz0 = new Quiz("W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "ok", "W7WeU.tWUIx{`'0Hz~x", "W7WeU.tWUIx{`'0Hz~x");
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(quizDao0).getAll();
      doReturn("ok").when(quizDao0).remove(anyString());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) system.controller.service.QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) system.controller.service.QuizService.class);
      String string0 = quizService0.edit(quiz0);
      assertEquals("ok", string0);
  }
}
