/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:38:45 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.UserController;
import system.controller.service.UserService;
import system.controller.simple_frontend_models.Response;
import system.model.users.User;
import system.model.users.UserType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.remove("Mxa}s>n=rU7$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.service = null;
      // Undeclared exception!
      try { 
        userController0.getByLogin("xaY\"o|Gy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserController userController0 = new UserController();
      // Undeclared exception!
      try { 
        userController0.getById("_y5Qsonh-1{o_~)1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.service = null;
      // Undeclared exception!
      try { 
        userController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("ug>4g)@Uu4~H5F", (String) null).when(userService0).edit(any(system.model.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.edit((User) null);
      // Undeclared exception!
      try { 
        userController0.edit((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).copy(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).add(any(system.model.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(userService0).copy(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.copy("admin");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.remove("system.controller.simple_frontend_models.Response");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("1a]q&iM#;/").when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.remove("system.controller.simple_frontend_models.Response");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(userService0).add(any(system.model.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.add(user0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("vw9f#e}F").when(userService0).add(any(system.model.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.add(user0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserController userController0 = new UserController();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getById("nok");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getById("system.controller.simple_frontend_models.Response");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserController userController0 = new UserController();
      UserType userType0 = UserType.TEACHER;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("%").when(user1).getId();
      doReturn(userType0).when(user1).getType();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1, user1, user1, (User) null).when(userService0).get(anyString());
      doReturn(true).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.getByLogin("DELETE");
      Response response0 = userController0.verify("vw9fU#e}F", "65\"++X!MSr|}1");
      Response response1 = userController0.getByLogin("system.controller.simple_frontend_models.Response");
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.verify("system.controller.UserController", "");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userService0).getAll();
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getAll();
      assertNotNull(response0);
  }
}
