/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:20:14 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.UserController;
import system.controller.service.UserService;
import system.controller.simple_frontend_models.Response;
import system.model.classes.users.User;
import system.model.classes.users.UserType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).add(any(system.model.classes.users.User.class));
      doReturn((User) null, (User) null).when(userService0).get(anyString());
      doReturn((LinkedList) null).when(userService0).getAll();
      doReturn((User) null).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.verify("/x,U-Z5@0L]TEOX{)", "/x,U-Z5@0L]TEOX{)");
      assertNotNull(response0);
      
      Response response1 = userController0.getById("0[e+R&oF~+");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      Response response2 = userController0.getAll();
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertNotNull(response2);
      
      Response response3 = userController0.getByLogin((String) null);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response1));
      assertNotSame(response3, response0);
      assertNotSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotNull(response3);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(userService0).copy(anyString());
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.copy("Jck{CD9U KaY 1lut");
      assertNotNull(response0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("ok", (String) null).when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("").when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn((User) null, (User) null).when(userService0).get(anyString());
      doReturn((User) null).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.edit(user1);
      assertNotNull(response0);
      
      UserService userService1 = userController0.service;
      assertSame(userService1, userService0);
      assertNotNull(userService1);
      
      userController0.service = userService1;
      User user2 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response1 = userController0.add(user2);
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      Response response2 = userController0.getById("");
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertNotNull(response2);
      
      String string0 = "";
      Response response3 = userController0.verify("", "nok");
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertNotSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertNotNull(response3);
      
      User user3 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response4 = userController0.verify("ok", "");
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response3));
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotSame(response4, response3);
      assertNotNull(response4);
      
      User user4 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn((User) null, (User) null).when(userService0).get(anyString());
      doReturn((LinkedList) null, (LinkedList) null).when(userService0).getAll();
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getAll();
      assertNotNull(response0);
      
      Response response1 = userController0.getByLogin("system.controller.service.UserService");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      Response response2 = userController0.getByLogin((String) null);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertNotNull(response2);
      
      Response response3 = userController0.getAll();
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response1));
      assertNotSame(response3, response0);
      assertNotSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotNull(response3);
      
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userService0).get(anyString());
      doReturn(user0).when(userService0).getById(anyString());
      doReturn("ok", (String) null).when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      String string0 = "";
      Response response0 = userController0.getByLogin("");
      assertNotNull(response0);
      
      Response response1 = userController0.getById("@(qKB/.vRu");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      Response response2 = userController0.remove(":7YX)iMP;sqB_");
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertNotNull(response2);
      
      Response response3 = userController0.verify("7z{", "JD.?~");
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotNull(response3);
      
      // Undeclared exception!
      try { 
        userController0.remove("/;(#stlOj;m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("d").when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.remove("uF(9l,");
      assertNotNull(response0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null, (User) null, (User) null, (User) null).when(userService0).get(anyString());
      doReturn((LinkedList) null).when(userService0).getAll();
      doReturn((User) null).when(userService0).getById(anyString());
      doReturn((String) null).when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("");
      assertNotNull(response0);
      
      Response response1 = userController0.verify("KmP)", "34x),#,v>V");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      Response response2 = userController0.getById("p8~hRf]wVc+^`aQ");
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertNotNull(response2);
      
      String string0 = "";
      Response response3 = userController0.getByLogin("");
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotNull(response3);
      
      Response response4 = userController0.getAll();
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotNull(response4);
      
      Response response5 = userController0.verify((String) null, (String) null);
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response1));
      assertNotSame(response5, response4);
      assertNotSame(response5, response2);
      assertNotSame(response5, response3);
      assertNotSame(response5, response0);
      assertNotSame(response5, response1);
      assertNotNull(response5);
      
      // Undeclared exception!
      try { 
        userController0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user0).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      UserService userService1 = userController0.service;
      assertSame(userService1, userService0);
      assertNotNull(userService1);
      
      userController0.service = userService1;
      Response response0 = userController0.getById("ecn1");
      assertNotNull(response0);
      
      Response response1 = userController0.getById("~");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("dYn@").when(userService0).copy(anyString());
      doReturn(user0).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("_ds]es}l");
      assertNotNull(response0);
      
      Response response1 = userController0.copy("<|tfa RZ:P#C]k");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("id without = is ").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.add(user0);
      assertNotNull(response0);
      
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("F{>Cf4(n,iD").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      UserService userService1 = userController0.service;
      assertSame(userService1, userService0);
      assertNotNull(userService1);
      
      userController0.service = userService1;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.add(user0);
      assertNotNull(response0);
      
      String string0 = "h~z?=EjOdu*";
      Response response1 = userController0.verify("!*", "h~z?=EjOdu*");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("POST");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userService0).get(anyString());
      doReturn(false).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.verify("", "POST");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("[U_30d{GQ2IVomAx", (String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response0 = userController0.edit(user0);
      assertNotNull(response0);
      
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.service = null;
      UserService userService1 = userController0.service;
      assertNull(userService1);
      
      userController0.service = null;
      // Undeclared exception!
      try { 
        userController0.getById("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userService0).getAll();
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getAll();
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.verify("", "result");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).copy(anyString());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("");
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        userController0.copy("W3nRi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).copy(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("|6%H!kpQ.ZL6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getById("z-$?");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("U;m>BIfxvyBjiG@F(R");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).getById(anyString());
      doReturn((String) null).when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getById("em.}7o^[IY_Zp");
      assertNotNull(response0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        userController0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).add(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.add(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      UserService userService1 = userController0.service;
      assertSame(userService1, userService0);
      assertNotNull(userService1);
      
      userController0.service = userService1;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.remove("eb&1cM-XNg{:|,k>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getById("#p]v:0.Q44|L");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.getByLogin("@Sdoeb]T2*[)~T");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).get(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.verify("TRACE", "TRACE");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.edit(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserController userController0 = new UserController();
      assertNotNull(userController0);
      
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("}R\"!pdX:{J`24DO^").when(user1).getId();
      User user2 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((UserType) null).when(user2).getType();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("F{>Cf4(n,iD").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("rIuc,~:W", "z^t").when(userService0).copy(anyString());
      doReturn("F{>Cf4(n,iD").when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn(user0, user1, user1, user2).when(userService0).get(anyString());
      doReturn((LinkedList) null).when(userService0).getAll();
      doReturn(user1, user2).when(userService0).getById(anyString());
      doReturn(true).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Response response0 = userController0.copy("error");
      assertNotNull(response0);
      
      Response response1 = userController0.getById("F{>Cf4(n,iD");
      assertFalse(response1.equals((Object)response0));
      assertNotSame(response1, response0);
      assertNotNull(response1);
      
      UserService userService1 = userController0.service;
      assertSame(userService1, userService0);
      assertNotNull(userService1);
      
      userController0.service = userService1;
      User user3 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response2 = userController0.getByLogin("pass");
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertNotNull(response2);
      
      Response response3 = userController0.add(user3);
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response2));
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertNotSame(response3, response2);
      assertNotNull(response3);
      
      Response response4 = userController0.verify("!*", "h~z?=EjOdu*");
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response1));
      assertNotSame(response4, response0);
      assertNotSame(response4, response3);
      assertNotSame(response4, response2);
      assertNotSame(response4, response1);
      assertNotNull(response4);
      
      User user4 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response5 = userController0.edit(user4);
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response1));
      assertFalse(response5.equals((Object)response3));
      assertNotSame(response5, response2);
      assertNotSame(response5, response4);
      assertNotSame(response5, response0);
      assertNotSame(response5, response1);
      assertNotSame(response5, response3);
      assertNotNull(response5);
      
      Response response6 = userController0.copy("h~z?=EjOdu*");
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response5));
      assertNotSame(response6, response2);
      assertNotSame(response6, response4);
      assertNotSame(response6, response1);
      assertNotSame(response6, response0);
      assertNotSame(response6, response3);
      assertNotSame(response6, response5);
      assertNotNull(response6);
      
      Response response7 = userController0.getById("ok");
      assertFalse(response7.equals((Object)response0));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response4));
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response3));
      assertNotSame(response7, response0);
      assertNotSame(response7, response5);
      assertNotSame(response7, response1);
      assertNotSame(response7, response4);
      assertNotSame(response7, response6);
      assertNotSame(response7, response2);
      assertNotSame(response7, response3);
      assertNotNull(response7);
      
      Response response8 = userController0.getAll();
      assertFalse(response8.equals((Object)response6));
      assertFalse(response8.equals((Object)response7));
      assertFalse(response8.equals((Object)response1));
      assertFalse(response8.equals((Object)response3));
      assertFalse(response8.equals((Object)response0));
      assertFalse(response8.equals((Object)response5));
      assertFalse(response8.equals((Object)response4));
      assertFalse(response8.equals((Object)response2));
      assertNotSame(response8, response6);
      assertNotSame(response8, response7);
      assertNotSame(response8, response1);
      assertNotSame(response8, response3);
      assertNotSame(response8, response0);
      assertNotSame(response8, response5);
      assertNotSame(response8, response4);
      assertNotSame(response8, response2);
      assertNotNull(response8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserController userController0 = new UserController();
      UserType userType0 = UserType.TEACHER;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user1).getId();
      doReturn((UserType) null).when(user1).getType();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("F{>Cf4(n,iD").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("F{>Cf4(n,iD").when(userService0).copy(anyString());
      doReturn("F{>Cf4(n,iD").when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn(user0, user1, user1).when(userService0).get(anyString());
      doReturn(user1, (User) null).when(userService0).getById(anyString());
      doReturn(true).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.getById("F{>Cf4(n,iD");
      UserService userService1 = userController0.service;
      userController0.service = userService1;
      User user2 = mock(User.class, new ViolatedAssumptionAnswer());
      userController0.add(user2);
      userController0.verify("!*", "h~z?=EjOdu*");
      User user3 = mock(User.class, new ViolatedAssumptionAnswer());
      userController0.edit(user3);
      Response response0 = userController0.copy("h~z?=EjOdu*");
      Response response1 = userController0.getById("ok");
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserController userController0 = new UserController();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userService0).copy(anyString());
      doReturn(user0).when(userService0).get(anyString());
      doReturn(user0).when(userService0).getById(anyString());
      doReturn("0^").when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      UserService userService1 = userController0.service;
      userController0.service = userService1;
      String string0 = "+p!&.,t/V|r`~CP^";
      userController0.getByLogin("+p!&.,t/V|r`~CP^");
      userController0.getById("%");
      UserService userService2 = userController0.service;
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      userController0.remove("id without = is ");
      // Undeclared exception!
      try { 
        userController0.copy("a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserController userController0 = new UserController();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("j0F,").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn((String) null).when(userService0).copy(anyString());
      doReturn("j0F,").when(userService0).edit(any(system.model.classes.users.User.class));
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      userController0.add(user1);
      userController0.edit(user0);
      // Undeclared exception!
      try { 
        userController0.copy("result");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserController userController0 = new UserController();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userService0).get(anyString());
      doReturn(false).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.verify("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserController userController0 = new UserController();
      UserType userType0 = UserType.TEACHER;
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserType userType1 = UserType.ADMINISTRATOR;
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("TRACE").when(user1).getId();
      doReturn(userType1).when(user1).getType();
      User user2 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user2).getId();
      doReturn((UserType) null).when(user2).getType();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(userService0).add(any(system.model.classes.users.User.class));
      doReturn("TRACE").when(userService0).edit(any(system.model.classes.users.User.class));
      doReturn(user0, user1, user1, user1, user2).when(userService0).get(anyString());
      doReturn(user0, user2).when(userService0).getById(anyString());
      doReturn(true, true).when(userService0).isPasswordCorrect(anyString() , anyString());
      doReturn("nok", "ok", "nok", "TRACE").when(userService0).remove(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      UserService userService1 = userController0.service;
      userController0.service = userService1;
      userController0.remove("W{y0e.%Y");
      userController0.getByLogin("");
      userController0.getById("@(qKB/.vRu");
      userController0.remove(":7YX)iMP;sqB_");
      userController0.remove("f");
      Response response0 = userController0.verify("7z{", "JD.?~");
      userController0.remove("/;(#stlOj;m");
      User user3 = mock(User.class, new ViolatedAssumptionAnswer());
      userController0.edit(user3);
      userController0.getById((String) null);
      userController0.verify("", "");
      User user4 = mock(User.class, new ViolatedAssumptionAnswer());
      Response response1 = userController0.add(user4);
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserController userController0 = new UserController();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getId();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user0, (User) null).when(userService0).get(anyString());
      doReturn(false).when(userService0).isPasswordCorrect(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.verify("pass", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserController userController0 = new UserController();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn("type", (String) null).when(userService0).add(any(system.model.classes.users.User.class));
      doReturn(user0, user0).when(userService0).get(anyString());
      doReturn((LinkedList) null).when(userService0).getAll();
      doReturn(user0).when(userService0).getById(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.getByLogin("H!3E&]*s3'Wsy.v");
      userController0.getById("1F7nwA`hRzr%Sj=L=#?");
      userController0.getByLogin("");
      User user1 = null;
      userController0.add((User) null);
      userController0.getAll();
      // Undeclared exception!
      try { 
        userController0.add((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
