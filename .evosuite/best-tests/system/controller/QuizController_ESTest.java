/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 14:57:31 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.QuizController;
import system.controller.service.QuizService;
import system.controller.simple_frontend_models.Response;
import system.model.classes.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizController_ESTest extends QuizController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      // Undeclared exception!
      try { 
        quizController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(quizService0).remove(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      // Undeclared exception!
      try { 
        quizController0.remove("P}?$[f&YrM~%)$Z],N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      quizController0.service = null;
      // Undeclared exception!
      try { 
        quizController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(quizService0).edit(any(system.model.classes.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        quizController0.edit(quiz0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      // Undeclared exception!
      try { 
        quizController0.copy("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(quizService0).copy(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      // Undeclared exception!
      try { 
        quizController0.copy("#Pq:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(quizService0).add(any(system.model.classes.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        quizController0.add(quiz0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("-_`3 };}").when(quizService0).edit(any(system.model.classes.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.edit((Quiz) null);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(quizService0).remove(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.remove("\"OP0[CJ$kv;]");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("+!a").when(quizService0).remove(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.remove("}0,E4H-pH/k");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("+!a", "nok").when(quizService0).copy(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.copy("S$7mI*");
      Response response1 = quizController0.copy("5f]\"( EY6QC");
      assertFalse(response1.equals((Object)response0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("X!~|GhB#`#").when(quizService0).add(any(system.model.classes.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      Response response0 = quizController0.add(quiz0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quiz0).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.get("P}?$[f&YrM~%)$Z],N");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.get("OEJN|V@]vt1r-sxwi(");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quiz0).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.getWithQuiz("system.controller.QuizController");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.getWithQuiz("+&");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizService0).getAll();
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.getAll();
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(quizService0).getAllWithCatNamesByTeacher(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.getAllWithCanNames("objects");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuizController quizController0 = new QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizService0).generateRealQuestions(anyString());
      Injector.inject(quizController0, (Class<?>) QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) QuizController.class);
      Response response0 = quizController0.getQuestionsFromQuiz("31!*4[{?W9P");
      assertNotNull(response0);
  }
}
