/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 12:22:57 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuestionGroupDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.simple_frontend_models.QuestionGroupWithNumberOfQuestions;
import system.model.questions.Question;
import system.model.questions.QuestionGroup;
import system.model.questions.QuestionGroupType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupService_ESTest extends QuestionGroupService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups((String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = mock(QuestionGroupWithNumberOfQuestions.class, new ViolatedAssumptionAnswer());
      Object object0 = system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn.lambdaInc(0, questionGroupWithNumberOfQuestions0, (-764));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn questionGroupService___CLR4_1_2amamjp8v54pn0 = new system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupService questionGroupService1 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao1 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService1, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao1);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionGroup0).getFather();
      doReturn((String) null).when(questionGroup0).getGrandfather();
      doReturn((String) null).when(questionGroup0).getId();
      doReturn((QuestionGroupType) null, (QuestionGroupType) null).when(questionGroup0).getType();
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions(questionGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao1 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao1).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao1);
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBSUBCAT;
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionGroup0).getId();
      QuestionService questionService1 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService1);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.add(questionGroup0);
      questionGroupService0.getAll();
      QuestionService questionService2 = questionGroupService0.questionService;
      assertSame(questionService2, questionService1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupService questionGroupService1 = new QuestionGroupService();
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.dao = null;
      // Undeclared exception!
      try { 
        questionGroupService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      doReturn((String) null).when(questionGroupDao0).remove(anyString());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.questionService = null;
      // Undeclared exception!
      try { 
        questionGroupService0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.questionService = null;
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("Questions from group: ", "Questions from group: ", "Questions from group: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions("h}U)}}[3q$'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.dao = null;
      // Undeclared exception!
      try { 
        questionGroupService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.edit((QuestionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree("T}6PA9D7V", "T}6PA9D7V", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree((String) null, (String) null, "~Z: ehT&'KAu:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("", "", "%7fug(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupType questionGroupType0 = QuestionGroupType.SUBCAT;
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(questionGroup0).getFather();
      doReturn("Ni[C6;,(").when(questionGroup0).getId();
      doReturn(questionGroupType0, questionGroupType0).when(questionGroup0).getType();
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions(questionGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Question>) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupType questionGroupType0 = QuestionGroupType.CAT;
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      doReturn("/5(e};i`0s!").when(questionGroup0).getId();
      doReturn(questionGroupType0).when(questionGroup0).getType();
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions(questionGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      doReturn((String) null).when(questionGroupDao0).remove(anyString());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionGroup0).getId();
      String string0 = questionGroupService0.edit(questionGroup0);
      assertEquals("ok", string0);
  }
}
