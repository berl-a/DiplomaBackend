/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:23:41 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.QuestionController;
import system.controller.service.QuestionService;
import system.controller.simple_frontend_models.QuestionWithCategoryNames;
import system.controller.simple_frontend_models.Response;
import system.model.classes.questions.Question;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionController_ESTest extends QuestionController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("G90#Z*Od", (String) null).when(questionService0).remove(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      questionController0.remove("b#$T@De");
      // Undeclared exception!
      try { 
        questionController0.remove("G90#Z*Od");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      questionController0.service = null;
      // Undeclared exception!
      try { 
        questionController0.getAllWithCanNames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      questionController0.service = null;
      // Undeclared exception!
      try { 
        questionController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("nok", (String) null).when(questionService0).edit(any(system.model.classes.questions.Question.class));
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Question question1 = mock(Question.class, new ViolatedAssumptionAnswer());
      questionController0.edit(question1);
      // Undeclared exception!
      try { 
        questionController0.edit(question0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionService0).add(any(system.model.classes.questions.Question.class));
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        questionController0.add(question0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn(question0).when(questionService0).get(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.get((String) null);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.getAll();
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((List<QuestionWithCategoryNames>) null).when(questionService0).getAllWithCatNamesByTeacher(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.getAllWithCanNames("J&Da;qV40c}<g4D");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionService0).edit(any(system.model.classes.questions.Question.class));
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      Response response0 = questionController0.edit(question0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionService0).remove(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.remove("system.model.dao.Dao");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("/ Q{[w%hwq7l").when(questionService0).add(any(system.model.classes.questions.Question.class));
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      Response response0 = questionController0.add(question0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(questionService0).add(any(system.model.classes.questions.Question.class));
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      Response response0 = questionController0.add(question0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn(question0).when(questionService0).get(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.get("/ Q{[w%hwq7l");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      questionController0.service = null;
      // Undeclared exception!
      try { 
        questionController0.get("VJiGHOR55sgjN|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionController", e);
      }
  }
}
