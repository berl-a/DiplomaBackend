/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:13:47 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.controller.simple_frontend_models.QuizWithCategoryNames;
import system.model.classes.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizWithCategoryNames_ESTest extends QuizWithCategoryNames_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0, "425g%;^$+'u,", "425g%;^$+'u,", "425g%;^$+'u,");
      String string0 = quizWithCategoryNames0.getSubsubcategoryName();
      assertEquals("425g%;^$+'u,", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      QuizWithCategoryNames quizWithCategoryNames1 = new QuizWithCategoryNames(quizWithCategoryNames0, "", "", "");
      String string0 = quizWithCategoryNames1.getSubsubcategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      quizWithCategoryNames0.setCategoryName("lm@iA,Lx");
      String string0 = quizWithCategoryNames0.getCategoryName();
      assertEquals("lm@iA,Lx", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0, "", "", "");
      String string0 = quizWithCategoryNames0.getCategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuizWithCategoryNames quizWithCategoryNames0 = null;
      try {
        quizWithCategoryNames0 = new QuizWithCategoryNames((Quiz) null, "QH1<n", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.quizzes.Quiz", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuizWithCategoryNames quizWithCategoryNames0 = null;
      try {
        quizWithCategoryNames0 = new QuizWithCategoryNames((Quiz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.quizzes.Quiz", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      QuizWithCategoryNames quizWithCategoryNames1 = new QuizWithCategoryNames(quizWithCategoryNames0, "", "", "");
      String string0 = quizWithCategoryNames1.getSubcategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      String string0 = quizWithCategoryNames0.getSubsubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      String string0 = quizWithCategoryNames0.getSubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      quizWithCategoryNames0.setSubcategoryName("system.controller.simple_frontend_models.QuizWithCategoryNames");
      String string0 = quizWithCategoryNames0.getSubcategoryName();
      assertEquals("system.controller.simple_frontend_models.QuizWithCategoryNames", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      quizWithCategoryNames0.setSubsubcategoryName("");
      assertNull(quizWithCategoryNames0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0);
      String string0 = quizWithCategoryNames0.getCategoryName();
      assertNull(string0);
  }
}
