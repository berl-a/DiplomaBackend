/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:05:23 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.controller.simple_frontend_models.QuestionGroupWithNumberOfQuestions;
import system.model.classes.questions.QuestionGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupWithNumberOfQuestions_ESTest extends QuestionGroupWithNumberOfQuestions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = new QuestionGroupWithNumberOfQuestions(questionGroup0, 0);
      int int0 = questionGroupWithNumberOfQuestions0.getNumberOfQuestions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = new QuestionGroupWithNumberOfQuestions(questionGroup0, (-502));
      questionGroupWithNumberOfQuestions0.setNumberOfQuestions(2086);
      int int0 = questionGroupWithNumberOfQuestions0.getNumberOfQuestions();
      assertEquals(2086, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = null;
      try {
        questionGroupWithNumberOfQuestions0 = new QuestionGroupWithNumberOfQuestions((QuestionGroup) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.questions.QuestionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = new QuestionGroupWithNumberOfQuestions(questionGroup0, (-502));
      int int0 = questionGroupWithNumberOfQuestions0.getNumberOfQuestions();
      assertEquals((-502), int0);
  }
}
