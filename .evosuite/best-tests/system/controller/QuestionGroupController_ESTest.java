/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:15:35 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.QuestionGroupController;
import system.controller.service.QuestionGroupService;
import system.controller.simple_frontend_models.Response;
import system.model.classes.questions.QuestionGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupController_ESTest extends QuestionGroupController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionGroupService0).rename(anyString() , anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      // Undeclared exception!
      try { 
        questionGroupController0.rename((String) null, "newId");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      // Undeclared exception!
      try { 
        questionGroupController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("1c", (String) null).when(questionGroupService0).remove(anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      questionGroupController0.remove("=");
      // Undeclared exception!
      try { 
        questionGroupController0.remove("=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      questionGroupController0.service = null;
      // Undeclared exception!
      try { 
        questionGroupController0.getAllWithNumberOfQuestions("org.springframework.web.bind.annotation.RequestMethod");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      questionGroupController0.service = null;
      // Undeclared exception!
      try { 
        questionGroupController0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("G6", (String) null).when(questionGroupService0).edit(any(system.model.classes.questions.QuestionGroup.class));
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      questionGroupController0.edit(questionGroup0);
      QuestionGroup questionGroup1 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        questionGroupController0.edit(questionGroup1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionGroupService0).add(any(system.model.classes.questions.QuestionGroup.class));
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        questionGroupController0.add(questionGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionGroupService0).rename(anyString() , anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      Response response0 = questionGroupController0.rename("oPg#~l3gjF=V?", "POST");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("1c").when(questionGroupService0).rename(anyString() , anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      Response response0 = questionGroupController0.rename("system.controller.service.QuestionService", "system.controller.service.QuestionService");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionGroupService0).edit(any(system.model.classes.questions.QuestionGroup.class));
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      Response response0 = questionGroupController0.edit(questionGroup0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionGroupService0).remove(anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      Response response0 = questionGroupController0.remove("@|-{G@D`u;7");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(questionGroupService0).add(any(system.model.classes.questions.QuestionGroup.class));
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      Response response0 = questionGroupController0.add(questionGroup0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(questionGroupService0).add(any(system.model.classes.questions.QuestionGroup.class));
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      QuestionGroup questionGroup0 = mock(QuestionGroup.class, new ViolatedAssumptionAnswer());
      Response response0 = questionGroupController0.add(questionGroup0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionGroupService0).getAllWithNumberOfQuestions(anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      Response response0 = questionGroupController0.getAllWithNumberOfQuestions("org.springframework.web.bind.annotation.RequestMethod");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupService0).getAll(anyString());
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      Response response0 = questionGroupController0.getAll("");
      assertNotNull(response0);
  }
}
