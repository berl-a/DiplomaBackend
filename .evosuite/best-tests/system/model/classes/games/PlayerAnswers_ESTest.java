/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:28:05 GMT 2018
 */

package system.model.classes.games;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.model.classes.games.Answer;
import system.model.classes.games.PlayerAnswers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayerAnswers_ESTest extends PlayerAnswers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlayerAnswers playerAnswers0 = new PlayerAnswers();
      playerAnswers0.setAnswers((HashMap<String, Answer>) null);
      HashMap<String, Answer> hashMap0 = playerAnswers0.getAnswers();
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlayerAnswers playerAnswers0 = new PlayerAnswers();
      playerAnswers0.addAnswer("system.model.classes.games.PlayerAnswers", (Answer) null);
      HashMap<String, Answer> hashMap0 = playerAnswers0.getAnswers();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PlayerAnswers playerAnswers0 = new PlayerAnswers();
      playerAnswers0.setAnswers((HashMap<String, Answer>) null);
      Answer answer0 = mock(Answer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        playerAnswers0.addAnswer((String) null, answer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.games.PlayerAnswers", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlayerAnswers playerAnswers0 = new PlayerAnswers();
      HashMap<String, Answer> hashMap0 = playerAnswers0.getAnswers();
      playerAnswers0.setAnswers(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }
}
