/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:30:03 GMT 2018
 */

package system.model.classes.games;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import system.model.classes.games.Game;
import system.model.classes.games.ListOfQuestions;
import system.model.classes.games.PlayerAnswers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("J*)#_ }Ps", "J*)#_ }Ps", "", "system.model.classes.games.ListOfQuestions", linkedList0, linkedList1, linkedList2, (-2617L), (-1490), 645L, (-1737L));
      long long0 = game1.getStartTime();
      assertEquals((-2617L), game1.getFullTime());
      assertEquals(645L, long0);
      assertEquals("J*)#_ }Ps", game1.getQuiz());
      assertEquals("", game1.getName());
      assertEquals("J*)#_ }Ps", game1.getId());
      assertEquals((-1490), game1.getNumberOfQuestions());
      assertEquals("system.model.classes.games.ListOfQuestions", game1.getCode());
      assertEquals((-1737L), game1.getOneQuestionTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      String string0 = game0.getQuiz();
      assertEquals("system.model.classes.games.Game", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Game game0 = new Game("");
      String string0 = game0.getQuiz();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.ListOfQuestions");
      game0.setQuestionsForPlayers((LinkedList<ListOfQuestions>) null);
      LinkedList<ListOfQuestions> linkedList0 = game0.getQuestionsForPlayers();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      game0.addPlayer("system.model.classes.games.Game");
      LinkedList<ListOfQuestions> linkedList0 = game0.getQuestionsForPlayers();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Game game0 = new Game((String) null);
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      Game game1 = new Game((String) null, (String) null, (String) null, "", linkedList0, linkedList1, (LinkedList<PlayerAnswers>) null, 0L, 2318, 2318, (-2513L));
      LinkedList<PlayerAnswers> linkedList2 = game1.getPlayersAnswers();
      assertEquals(0L, game1.getFullTime());
      assertEquals(2318, game1.getNumberOfQuestions());
      assertEquals((-2513L), game1.getOneQuestionTime());
      assertEquals(2318L, game1.getStartTime());
      assertNull(linkedList2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      game0.addPlayer("system.model.classes.games.Game");
      LinkedList<PlayerAnswers> linkedList0 = game0.getPlayersAnswers();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.ListOfQuestions");
      game0.setPlayers((LinkedList<String>) null);
      LinkedList<String> linkedList0 = game0.getPlayers();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      game0.addPlayer("system.model.classes.games.Game");
      LinkedList<String> linkedList0 = game0.getPlayers();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Game game0 = new Game();
      game0.setOneQuestionTime(1L);
      long long0 = game0.getOneQuestionTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Game game0 = new Game("");
      game0.setOneQuestionTime((-1667L));
      long long0 = game0.getOneQuestionTime();
      assertEquals((-1667L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Game game0 = new Game("");
      game0.setNumberOfQuestions(1687);
      int int0 = game0.getNumberOfQuestions();
      assertEquals(1687, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      game0.setNumberOfQuestions((-1));
      int int0 = game0.getNumberOfQuestions();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<ListOfQuestions> linkedList0 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList1 = game0.getPlayersAnswers();
      Game game1 = new Game("w?(J93ua&T>5a,1\u0000~", "@Q4dxu#cLh<//3B-:R", "vqUhh|V~", "h#Y%%*_R83W9,:9Vr", (LinkedList<String>) null, linkedList0, linkedList1, 5054L, 1, 5054L, 5054L);
      String string0 = game1.getName();
      assertEquals("h#Y%%*_R83W9,:9Vr", game1.getCode());
      assertEquals(5054L, game1.getFullTime());
      assertEquals(5054L, game1.getStartTime());
      assertEquals("vqUhh|V~", string0);
      assertEquals(5054L, game1.getOneQuestionTime());
      assertEquals("w?(J93ua&T>5a,1\u0000~", game1.getId());
      assertEquals(1, game1.getNumberOfQuestions());
      assertEquals("@Q4dxu#cLh<//3B-:R", game1.getQuiz());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("J*)#_ }Ps", "J*)#_ }Ps", "", "system.model.classes.games.ListOfQuestions", linkedList0, linkedList1, linkedList2, (-2617L), (-1490), 645L, (-1737L));
      String string0 = game1.getName();
      assertEquals((-2617L), game1.getFullTime());
      assertEquals(645L, game1.getStartTime());
      assertEquals("J*)#_ }Ps", game1.getQuiz());
      assertEquals((-1490), game1.getNumberOfQuestions());
      assertEquals("J*)#_ }Ps", game1.getId());
      assertEquals("system.model.classes.games.ListOfQuestions", game1.getCode());
      assertEquals((-1737L), game1.getOneQuestionTime());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Game game0 = new Game("system.model.classes.games.Game");
      game0.setId((String) null);
      String string0 = game0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Game game0 = new Game("");
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("", "", ">~l-r}loIM#", "", linkedList0, linkedList1, linkedList2, (-2154L), 0, (-534L), (-534L));
      String string0 = game1.getId();
      assertEquals("", string0);
      assertEquals((-2154L), game1.getFullTime());
      assertEquals((-534L), game1.getOneQuestionTime());
      assertEquals(0, game1.getNumberOfQuestions());
      assertEquals("", game1.getCode());
      assertEquals(">~l-r}loIM#", game1.getName());
      assertEquals("", game1.getQuiz());
      assertEquals((-534L), game1.getStartTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Game game0 = new Game();
      game0.setFullTime(1311L);
      long long0 = game0.getFullTime();
      assertEquals(1311L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("system.model.classes.games.ListOfQuestions", "U*thQ8XZ=?", "xJ[E)wA|j0%{D$", "xJ[E)wA|j0%{D$", linkedList0, linkedList1, linkedList2, (-1L), 0, 0, (-1L));
      long long0 = game1.getFullTime();
      assertEquals(0L, game1.getStartTime());
      assertEquals((-1L), game1.getOneQuestionTime());
      assertEquals((-1L), long0);
      assertEquals("xJ[E)wA|j0%{D$", game1.getName());
      assertEquals("system.model.classes.games.ListOfQuestions", game1.getId());
      assertEquals("U*thQ8XZ=?", game1.getQuiz());
      assertEquals(0, game1.getNumberOfQuestions());
      assertEquals("xJ[E)wA|j0%{D$", game1.getCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("J*)#_ }Ps", "J*)#_ }Ps", "", "system.model.classes.games.ListOfQuestions", linkedList0, linkedList1, linkedList2, (-2617L), (-1490), 645L, (-1737L));
      String string0 = game1.getCode();
      assertEquals("J*)#_ }Ps", game1.getId());
      assertEquals((-1490), game1.getNumberOfQuestions());
      assertEquals("", game1.getName());
      assertEquals("system.model.classes.games.ListOfQuestions", string0);
      assertEquals("J*)#_ }Ps", game1.getQuiz());
      assertEquals((-2617L), game1.getFullTime());
      assertEquals(645L, game1.getStartTime());
      assertEquals((-1737L), game1.getOneQuestionTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Game game0 = new Game();
      game0.setCode("");
      String string0 = game0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      Game game1 = new Game("", "", "", "taj4S[feANZ16Yh\"df", linkedList0, linkedList1, (LinkedList<PlayerAnswers>) null, 702L, (-1), 0L, 2L);
      // Undeclared exception!
      try { 
        game1.addPlayer("system.model.classes.games.Game");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.games.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Game game0 = null;
      try {
        game0 = new Game((Game) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.games.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = game0.getPlayers();
      LinkedList<ListOfQuestions> linkedList1 = game0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList2 = game0.getPlayersAnswers();
      Game game1 = new Game("-9e-+1zt", "-9e-+1zt", "-9e-+1zt", "-9e-+1zt", linkedList0, linkedList1, linkedList2, (-1L), 0, (-1L), (-1L));
      long long0 = game1.getStartTime();
      assertEquals((-1L), game1.getOneQuestionTime());
      assertEquals((-1L), long0);
      assertEquals(0, game1.getNumberOfQuestions());
      assertEquals((-1L), game1.getFullTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Game game0 = new Game();
      int int0 = game0.getNumberOfQuestions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.getQuiz();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Game game0 = new Game();
      game0.setStartTime((-1858L));
      assertEquals((-1858L), game0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Game game0 = new Game();
      game0.setName((String) null);
      assertEquals("00000000-0100-4000-8200-000003000000", game0.getId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Game game0 = new Game();
      Game game1 = new Game(game0);
      assertEquals(0, game1.getNumberOfQuestions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Game game0 = new Game();
      long long0 = game0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Game game0 = new Game();
      game0.setQuiz((String) null);
      assertEquals(0, game0.getNumberOfQuestions());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<PlayerAnswers> linkedList0 = game0.getPlayersAnswers();
      game0.setPlayersAnswers(linkedList0);
      assertEquals(0L, game0.getOneQuestionTime());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Game game0 = new Game();
      long long0 = game0.getOneQuestionTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Game game0 = new Game((String) null);
      String string0 = game0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.getCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Game game0 = new Game();
      long long0 = game0.getFullTime();
      assertEquals(0L, long0);
  }
}
