/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:17:28 GMT 2018
 */

package system.model.classes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.model.classes.Result;
import system.model.classes.games.Game;
import system.model.classes.games.ListOfRealQuestions;
import system.model.classes.games.Player;
import system.model.classes.games.PlayerAnswers;
import system.model.classes.games.PlayerPoints;
import system.model.classes.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Result_ESTest extends Result_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Result result0 = new Result();
      result0.setTeacher("00000000-0100-4000-8200-000003000000");
      String string0 = result0.getTeacher();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Result result0 = new Result();
      result0.setTeacher("");
      String string0 = result0.getTeacher();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Result result0 = new Result("");
      LinkedList<String> linkedList0 = result0.getPlayers();
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      LinkedList<Player> linkedList1 = result0.getRealPlayers();
      LinkedList<PlayerAnswers> linkedList2 = result0.getPlayersAnswers();
      LinkedList<Double> linkedList3 = result0.getPlayersPointSums();
      Result result1 = new Result(quiz0, (Game) null, "[kAz", linkedList0, linkedList1, (LinkedList<ListOfRealQuestions>) null, linkedList2, (LinkedList<PlayerPoints>) null, linkedList3);
      LinkedList<ListOfRealQuestions> linkedList4 = result1.getQuestionsForPlayers();
      assertNull(linkedList4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Result result0 = new Result();
      result0.setPlayersPoints((LinkedList<PlayerPoints>) null);
      LinkedList<PlayerPoints> linkedList0 = result0.getPlayersPoints();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quiz quiz0 = mock(Quiz.class, new ViolatedAssumptionAnswer());
      Game game0 = mock(Game.class, new ViolatedAssumptionAnswer());
      Result result0 = new Result("i");
      LinkedList<String> linkedList0 = result0.getPlayers();
      LinkedList<Player> linkedList1 = result0.getRealPlayers();
      LinkedList<ListOfRealQuestions> linkedList2 = result0.getQuestionsForPlayers();
      LinkedList<PlayerAnswers> linkedList3 = result0.getPlayersAnswers();
      LinkedList<PlayerPoints> linkedList4 = result0.getPlayersPoints();
      Result result1 = new Result("i", quiz0, game0, "i", linkedList0, linkedList1, linkedList2, linkedList3, linkedList4, (LinkedList<Double>) null);
      LinkedList<Double> linkedList5 = result1.getPlayersPointSums();
      assertNull(linkedList5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Result result0 = new Result();
      result0.setPlayers((LinkedList<String>) null);
      LinkedList<String> linkedList0 = result0.getPlayers();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Result result0 = new Result((String) null);
      String string0 = result0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Result result0 = new Result();
      result0.setId("");
      String string0 = result0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Result result0 = new Result();
      String string0 = result0.getTeacher();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Result result0 = new Result("");
      LinkedList<String> linkedList0 = result0.getPlayers();
      LinkedList<Player> linkedList1 = result0.getRealPlayers();
      LinkedList<ListOfRealQuestions> linkedList2 = result0.getQuestionsForPlayers();
      LinkedList<PlayerPoints> linkedList3 = result0.getPlayersPoints();
      LinkedList<Double> linkedList4 = result0.getPlayersPointSums();
      Result result1 = new Result((Quiz) null, (Game) null, "", linkedList0, linkedList1, linkedList2, (LinkedList<PlayerAnswers>) null, linkedList3, linkedList4);
      LinkedList<PlayerAnswers> linkedList5 = result1.getPlayersAnswers();
      assertNull(linkedList5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Result result0 = new Result("");
      result0.setRealQuiz((Quiz) null);
      assertEquals("", result0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Result result0 = new Result();
      String string0 = result0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Result result0 = new Result("");
      result0.setPlayersAnswers((LinkedList<PlayerAnswers>) null);
      assertNull(result0.getTeacher());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Result result0 = new Result();
      result0.setRealPlayers((LinkedList<Player>) null);
      LinkedList<Player> linkedList0 = result0.getRealPlayers();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Result result0 = new Result();
      LinkedList<Double> linkedList0 = result0.getPlayersPointSums();
      result0.setPlayersPointSums(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Result result0 = new Result();
      result0.setRealGame((Game) null);
      assertEquals("00000000-0100-4000-8200-000003000000", result0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Result result0 = new Result();
      Game game0 = result0.getRealGame();
      assertNull(game0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Result result0 = new Result("");
      Quiz quiz0 = result0.getRealQuiz();
      assertNull(quiz0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Result result0 = new Result();
      LinkedList<ListOfRealQuestions> linkedList0 = result0.getQuestionsForPlayers();
      result0.setQuestionsForPlayers(linkedList0);
      assertEquals("00000000-0100-4000-8200-000003000000", result0.getId());
  }
}
