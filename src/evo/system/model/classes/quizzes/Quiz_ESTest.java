/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 15:21:17 GMT 2018
 */

package system.model.classes.quizzes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import system.model.classes.quizzes.Quiz;
import system.model.classes.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Quiz_ESTest extends Quiz_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      Quiz quiz1 = new Quiz((String) null, (String) null, "", "U$Fk!$Ye*Oy]", "*0c&+L4KP!", "U$Fk!$Ye*Oy]", 5615L, linkedList0);
      long long0 = quiz1.getTime();
      assertEquals(5615L, long0);
      assertEquals("U$Fk!$Ye*Oy]", quiz1.getSubsubcategory());
      assertEquals("", quiz1.getTeacher());
      assertEquals("*0c&+L4KP!", quiz1.getSubcategory());
      assertEquals("U$Fk!$Ye*Oy]", quiz1.getCategory());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, "JGXE+", "", "~{L%n3", "");
      String string0 = quiz0.getTeacher();
      assertEquals("", quiz0.getCategory());
      assertEquals("JGXE+", string0);
      assertEquals("~{L%n3", quiz0.getSubcategory());
      assertEquals("", quiz0.getSubsubcategory());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      quiz0.setTeacher("");
      String string0 = quiz0.getTeacher();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Quiz quiz0 = new Quiz("", "4(PkS#", "system.model.classes.quizzes.QuizPart", "", "");
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      Quiz quiz1 = new Quiz("4(PkS#", "['BIw\"", "['BIw\"", "4oX0", "4(PkS#", 2056L, linkedList0);
      String string0 = quiz1.getSubsubcategory();
      assertEquals(2056L, quiz1.getTime());
      assertEquals("system.model.classes.quizzes.QuizPart", quiz0.getCategory());
      assertEquals("4(PkS#", quiz0.getTeacher());
      assertEquals("['BIw\"", quiz1.getTeacher());
      assertEquals("", quiz0.getName());
      assertEquals("4(PkS#", string0);
      assertEquals("4oX0", quiz1.getSubcategory());
      assertEquals("", quiz0.getSubsubcategory());
      assertEquals("", quiz0.getSubcategory());
      assertEquals("4(PkS#", quiz1.getName());
      assertEquals("['BIw\"", quiz1.getCategory());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quiz quiz0 = new Quiz("6hgs4zoKO", "", "system.model.classes.quizzes.Quiz", "6hgs4zoKO", "system.model.classes.quizzes.Quiz", "");
      String string0 = quiz0.getSubsubcategory();
      assertEquals("6hgs4zoKO", quiz0.getCategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz0.getSubcategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz0.getTeacher());
      assertEquals("", string0);
      assertEquals("", quiz0.getName());
      assertEquals("6hgs4zoKO", quiz0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quiz quiz0 = new Quiz("system.model.classes.quizzes.QuizPart", "^WeG?~+;", "^WeG?~+;", "3#{D.is$+", "system.model.classes.quizzes.QuizPart", "WKbq");
      String string0 = quiz0.getSubcategory();
      assertEquals("system.model.classes.quizzes.QuizPart", quiz0.getId());
      assertEquals("3#{D.is$+", quiz0.getCategory());
      assertEquals("WKbq", quiz0.getSubsubcategory());
      assertEquals("system.model.classes.quizzes.QuizPart", string0);
      assertEquals("^WeG?~+;", quiz0.getTeacher());
      assertEquals("^WeG?~+;", quiz0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      Quiz quiz1 = new Quiz("&!", "&!", "&!", "", "", (-387L), linkedList0);
      String string0 = quiz1.getSubcategory();
      assertEquals("", quiz1.getSubsubcategory());
      assertEquals("&!", quiz1.getCategory());
      assertEquals("&!", quiz1.getName());
      assertEquals("", string0);
      assertEquals((-387L), quiz1.getTime());
      assertEquals("&!", quiz1.getTeacher());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      quiz0.setParts((LinkedList<QuizPart>) null);
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quiz quiz0 = new Quiz("", "", "system.model.classes.quizzes.Quiz", "", "Xxw< 9");
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      Quiz quiz1 = new Quiz("", "system.model.classes.quizzes.Quiz", "system.model.classes.quizzes.Quiz", "", "system.model.classes.quizzes.Quiz", "system.model.classes.quizzes.Quiz", (-4052L), linkedList0);
      String string0 = quiz1.getName();
      assertEquals("", quiz1.getCategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz0.getCategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz1.getSubsubcategory());
      assertEquals("", quiz0.getTeacher());
      assertEquals("", quiz0.getName());
      assertEquals("system.model.classes.quizzes.Quiz", quiz1.getTeacher());
      assertEquals("system.model.classes.quizzes.Quiz", quiz1.getSubcategory());
      assertEquals("", quiz0.getSubcategory());
      assertEquals((-4052L), quiz1.getTime());
      assertEquals("", quiz1.getId());
      assertEquals("Xxw< 9", quiz0.getSubsubcategory());
      assertEquals("system.model.classes.quizzes.Quiz", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Quiz quiz0 = new Quiz("K+dtIJk33YFXjNfAk", "", "", "K+dtIJk33YFXjNfAk", "", "");
      String string0 = quiz0.getName();
      assertEquals("", quiz0.getSubsubcategory());
      assertEquals("", string0);
      assertEquals("", quiz0.getSubcategory());
      assertEquals("K+dtIJk33YFXjNfAk", quiz0.getCategory());
      assertEquals("K+dtIJk33YFXjNfAk", quiz0.getId());
      assertEquals("", quiz0.getTeacher());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quiz quiz0 = new Quiz("e6g~d_Tv</k", "system.model.classes.quizzes.Quiz", "system.model.classes.quizzes.Quiz", ")o'jIb\").x8*46tbhs+", "");
      quiz0.setId("");
      quiz0.getId();
      assertEquals(")o'jIb\").x8*46tbhs+", quiz0.getSubcategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz0.getCategory());
      assertEquals("system.model.classes.quizzes.Quiz", quiz0.getTeacher());
      assertEquals("", quiz0.getSubsubcategory());
      assertEquals("e6g~d_Tv</k", quiz0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quiz quiz0 = new Quiz("system.model.classes.quizzes.QuizPart", "^WeG?~+;", "^WeG?~+;", "3#{D.is$+", "system.model.classes.quizzes.QuizPart", "WKbq");
      String string0 = quiz0.getCategory();
      assertEquals("system.model.classes.quizzes.QuizPart", quiz0.getId());
      assertEquals("^WeG?~+;", quiz0.getName());
      assertEquals("3#{D.is$+", string0);
      assertEquals("WKbq", quiz0.getSubsubcategory());
      assertEquals("system.model.classes.quizzes.QuizPart", quiz0.getSubcategory());
      assertEquals("^WeG?~+;", quiz0.getTeacher());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quiz quiz0 = new Quiz("", "", "", "", "pignB,{aCKYOiQW", "");
      String string0 = quiz0.getCategory();
      assertEquals("", string0);
      assertEquals("", quiz0.getTeacher());
      assertEquals("", quiz0.getId());
      assertEquals("", quiz0.getName());
      assertEquals("", quiz0.getSubsubcategory());
      assertEquals("pignB,{aCKYOiQW", quiz0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quiz quiz0 = null;
      try {
        quiz0 = new Quiz((Quiz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.classes.quizzes.Quiz", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      quiz0.setTime(438L);
      assertEquals(438L, quiz0.getTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      Quiz quiz1 = new Quiz(quiz0);
      assertEquals(0L, quiz1.getTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      String string0 = quiz0.getTeacher();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      quiz0.setSubsubcategory((String) null);
      assertNull(quiz0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      quiz0.setId((String) null);
      String string0 = quiz0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      quiz0.setSubcategory((String) null);
      assertEquals(0L, quiz0.getTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = quiz0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quiz quiz0 = new Quiz("dp|", "dp|", "dp|", "dp|", "dp|");
      LinkedList<QuizPart> linkedList0 = quiz0.getParts();
      Quiz quiz1 = new Quiz("dp|", "dp|", "dp|", "dp|", "dp|", "dp|", (-4L), linkedList0);
      long long0 = quiz1.getTime();
      assertEquals((-4L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = quiz0.getSubsubcategory();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      String string0 = quiz0.getCategory();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      String string0 = quiz0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      quiz0.setCategory((String) null);
      assertNull(quiz0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quiz quiz0 = new Quiz();
      quiz0.setName((String) null);
      assertNull(quiz0.getTeacher());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = quiz0.getSubcategory();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quiz quiz0 = new Quiz((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = quiz0.changeId();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quiz quiz0 = new Quiz("dp|", "dp|", "dp|", "dp|", "dp|");
      long long0 = quiz0.getTime();
      assertEquals(0L, long0);
  }
}
