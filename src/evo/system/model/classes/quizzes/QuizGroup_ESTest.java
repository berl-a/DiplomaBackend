/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 07 14:59:48 GMT 2018
 */

package system.model.classes.quizzes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import system.model.classes.QuizGroupType;
import system.model.classes.quizzes.QuizGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizGroup_ESTest extends QuizGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("", quizGroupType0, "", "", "");
      quizGroup0.setTeacher("$c@#q3laYcV&!");
      String string0 = quizGroup0.getTeacher();
      assertEquals("$c@#q3laYcV&!", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup(":1AdG7^%", "", quizGroupType0, "@q`zD %nI:~w5-P", ":1AdG7^%", ":1AdG7^%");
      String string0 = quizGroup0.getTeacher();
      assertEquals(":1AdG7^%", quizGroup0.getId());
      assertEquals("@q`zD %nI:~w5-P", quizGroup0.getFather());
      assertEquals(":1AdG7^%", quizGroup0.getName());
      assertEquals(":1AdG7^%", quizGroup0.getGrandfather());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("system.model.classes.quizzes.QuizGroup", ")m_!<5", quizGroupType0, "", "Z.PK]o", "]wRQ>K8:4=");
      String string0 = quizGroup0.getName();
      assertEquals("", quizGroup0.getFather());
      assertEquals("Z.PK]o", quizGroup0.getGrandfather());
      assertEquals("system.model.classes.quizzes.QuizGroup", quizGroup0.getId());
      assertEquals(")m_!<5", quizGroup0.getTeacher());
      assertEquals("]wRQ>K8:4=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.CAT;
      QuizGroup quizGroup0 = new QuizGroup("", "", "", "", "", quizGroupType0);
      String string0 = quizGroup0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBCAT;
      QuizGroup quizGroup0 = new QuizGroup((String) null, (String) null, quizGroupType0, "JlV O& +u", (String) null, (String) null);
      String string0 = quizGroup0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("", quizGroupType0, "", "SUBCAT", "SUBCAT");
      String string0 = quizGroup0.getGrandfather();
      assertEquals("SUBCAT", quizGroup0.getName());
      assertEquals("", quizGroup0.getTeacher());
      assertEquals("", quizGroup0.getFather());
      assertEquals("SUBCAT", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup("", quizGroupType0, "", "", "");
      String string0 = quizGroup0.getGrandfather();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      quizGroup0.setFather("w*nlL:k`H#d");
      String string0 = quizGroup0.getFather();
      assertEquals("w*nlL:k`H#d", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      quizGroup0.getType();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBSUBCAT;
      QuizGroup quizGroup0 = new QuizGroup((String) null, quizGroupType0, (String) null, (String) null, (String) null);
      String string0 = quizGroup0.getFather();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      String string0 = quizGroup0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      String string0 = quizGroup0.getGrandfather();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      String string0 = quizGroup0.getTeacher();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.CAT;
      QuizGroup quizGroup0 = new QuizGroup("", "", "", "", "", quizGroupType0);
      String string0 = quizGroup0.getFather();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      quizGroup0.setGrandfather("");
      assertNull(quizGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      quizGroup0.setId("");
      String string0 = quizGroup0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuizGroupType quizGroupType0 = QuizGroupType.SUBCAT;
      QuizGroup quizGroup0 = new QuizGroup((String) null, (String) null, quizGroupType0, "JlV O& +u", (String) null, (String) null);
      String string0 = quizGroup0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      QuizGroupType quizGroupType0 = QuizGroupType.SUBCAT;
      quizGroup0.setType(quizGroupType0);
      QuizGroupType quizGroupType1 = quizGroup0.getType();
      assertSame(quizGroupType1, quizGroupType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuizGroup quizGroup0 = new QuizGroup();
      quizGroup0.setName((String) null);
      assertEquals("00000000-0100-4000-8200-000003000000", quizGroup0.getId());
  }
}
