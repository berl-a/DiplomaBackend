/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 01:08:04 GMT 2018
 */

package system.controller.dao;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.QuestionGroupWithNumberOfQuestions;
import system.controller.simple_frontend_models.QuizPartWithCategoryNames;
import system.controller.simple_frontend_models.QuizWithCategoryNames;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Dao_ESTest extends Dao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuizWithCategoryNames quizWithCategoryNames0 = mock(QuizWithCategoryNames.class, new ViolatedAssumptionAnswer());
      Object object0 = Dao.__CLR4_1_21jh1jhjp8v560p.lambdaInc(0, quizWithCategoryNames0, 0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      system.controller.dao.Dao<QuizWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizWithCategoryNames>("Id_STRING");
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao1 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("Id_STRING");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao1, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao1, (Class<?>) system.controller.dao.Dao.class);
      MySQLDatabaseService mySQLDatabaseService1 = dao1.databaseService;
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      dao0.setTableName((String) null);
      String string0 = dao0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      String string0 = dao0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("Um");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dao0.remove("mbUIR.[Cn2y5H?5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      MySQLDatabaseService mySQLDatabaseService1 = dao0.databaseService;
      dao0.databaseService = mySQLDatabaseService1;
      dao0.databaseService = null;
      // Undeclared exception!
      try { 
        dao0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("system.controller.simple_frontend_models.GameWithActualQuiz");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      // Undeclared exception!
      try { 
        dao0.add((QuizPartWithCategoryNames) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao0 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("728B24bOh");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      system.controller.dao.Dao<QuestionGroupWithNumberOfQuestions> dao1 = new system.controller.dao.Dao<QuestionGroupWithNumberOfQuestions>("728B24bOh");
      MySQLDatabaseService mySQLDatabaseService1 = dao0.databaseService;
      Injector.inject(dao1, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(dao1, (Class<?>) system.controller.dao.Dao.class);
      String string0 = dao1.remove("728B24bOh");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "Um";
      system.controller.dao.Dao<GameWithActualQuiz> dao0 = new system.controller.dao.Dao<GameWithActualQuiz>("Um");
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao1 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("Um");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(dao1, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao1, (Class<?>) system.controller.dao.Dao.class);
      MySQLDatabaseService mySQLDatabaseService1 = dao1.databaseService;
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      String string1 = dao0.remove(string0);
      assertEquals("nok", string1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Dao.__CLR4_1_21jh1jhjp8v560p dao___CLR4_1_21jh1jhjp8v560p0 = new Dao.__CLR4_1_21jh1jhjp8v560p();
      String string0 = "Um";
      system.controller.dao.Dao<GameWithActualQuiz> dao0 = new system.controller.dao.Dao<GameWithActualQuiz>("Um");
      system.controller.dao.Dao<QuizPartWithCategoryNames> dao1 = new system.controller.dao.Dao<QuizPartWithCategoryNames>("Um");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(dao1, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao1, (Class<?>) system.controller.dao.Dao.class);
      MySQLDatabaseService mySQLDatabaseService1 = dao1.databaseService;
      Injector.inject(dao0, (Class<?>) system.controller.dao.Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(dao0, (Class<?>) system.controller.dao.Dao.class);
      // Undeclared exception!
      try { 
        dao0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }
}
