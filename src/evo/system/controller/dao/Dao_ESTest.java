/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:30:58 GMT 2018
 */

package system.controller.dao;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.QuestionWithCategoryNames;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Dao_ESTest extends Dao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>((String) null);
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      String string0 = dao0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Dao<GameWithActualQuiz> dao0 = new Dao<GameWithActualQuiz>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      String string0 = dao0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>("Id_STRING");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      dao0.databaseService = null;
      // Undeclared exception!
      try { 
        dao0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      dao0.databaseService = null;
      // Undeclared exception!
      try { 
        dao0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>(":%9i /jg0>etAj-T");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      // Undeclared exception!
      try { 
        dao0.add((QuestionWithCategoryNames) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Dao<GameWithActualQuiz> dao0 = new Dao<GameWithActualQuiz>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      String string0 = dao0.remove("");
      assertEquals("nok", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Dao<GameWithActualQuiz> dao0 = new Dao<GameWithActualQuiz>("Jx1f36uisI-8#m'{");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      // Undeclared exception!
      try { 
        dao0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>("^H.C<Z5bq");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      String string0 = dao0.getTableName();
      assertEquals("^H.C<Z5bq", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Dao<GameWithActualQuiz> dao0 = new Dao<GameWithActualQuiz>("");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      String string0 = dao0.remove("w^3do1cS]");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Dao<QuestionWithCategoryNames> dao0 = new Dao<QuestionWithCategoryNames>("cE&f_5>HGOREC");
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(dao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(dao0, (Class<?>) Dao.class);
      dao0.setTableName("cE&f_5>HGOREC");
      assertFalse(Dao.SQLITE_NOT_MYSQL);
  }
}
