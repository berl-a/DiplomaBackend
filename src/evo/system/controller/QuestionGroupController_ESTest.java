/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 00:38:30 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.model.dao.Dao;
import system.model.dao.QuestionDao;
import system.model.dao.QuestionGroupDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.QuestionGroupWithNumberOfQuestions;
import system.model.questions.QuestionGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupController_ESTest extends QuestionGroupController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionGroupController0, (Class<?>) QuestionGroupController.class, "service", (Object) questionGroupService0);
      Injector.validateBean(questionGroupController0, (Class<?>) QuestionGroupController.class);
      String string0 = "ZloJ";
      String string1 = "";
      // Undeclared exception!
      try { 
        questionGroupController0.rename(string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = system.controller.QuestionGroupController.__CLR4_1_21cq1cqjp8v55wx.lambdaInc(1776, "", (-412));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      system.controller.QuestionGroupController.__CLR4_1_21cq1cqjp8v55wx questionGroupController___CLR4_1_21cq1cqjp8v55wx0 = new system.controller.QuestionGroupController.__CLR4_1_21cq1cqjp8v55wx();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      // Undeclared exception!
      try { 
        questionGroupController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionGroupController0.remove("Os9NM,eo-]+;mLE'#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      QuestionGroup questionGroup0 = new QuestionGroup();
      QuestionGroupWithNumberOfQuestions questionGroupWithNumberOfQuestions0 = new QuestionGroupWithNumberOfQuestions(questionGroup0, (-1395));
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      // Undeclared exception!
      try { 
        questionGroupController0.edit(questionGroupWithNumberOfQuestions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      // Undeclared exception!
      try { 
        questionGroupController0.getAllWithNumberOfQuestions("h9fM-yh&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuestionGroupController questionGroupController0 = new QuestionGroupController();
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionGroupController0.getAll("q'|Y3&T*!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionGroupController", e);
      }
  }
}
