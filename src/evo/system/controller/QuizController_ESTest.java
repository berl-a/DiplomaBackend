/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 00:20:29 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.QuizController;
import system.controller.dao.Dao;
import system.controller.dao.QuizDao;
import system.controller.service.QuizService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.QuizWithCategoryNames;
import system.controller.simple_frontend_models.Response;
import system.model.quizzes.Quiz;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizController_ESTest extends QuizController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = QuizController.__CLR4_1_2n9n9jp8v5538.lambdaInc(0, (Object) "system.controller.QuizController", 0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizController.__CLR4_1_2n9n9jp8v5538 quizController___CLR4_1_2n9n9jp8v5538_0 = new QuizController.__CLR4_1_2n9n9jp8v5538();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizService0).generateRealQuestions(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.getQuestionsFromQuiz("hyHU,n}3rAm,qW&= ");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      // Undeclared exception!
      try { 
        quizController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.remove("r'P4`'Y9&>A_YW5{%pl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.getWithQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.get("system.controller.QuizController");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      Quiz quiz0 = new Quiz(";`o>)&K {bS>!(", ";`o>)&K {bS>!(", "", "Access-Control-Allow-Credentials", "9j8$9RSd^U{IdUY=+j^", ";`o>)&K {bS>!(");
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0, "*G", "Access-Control-Allow-Credentials", ";`o>)&K {bS>!(");
      // Undeclared exception!
      try { 
        quizController0.edit(quizWithCategoryNames0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.copy("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.copy("ok");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      Quiz quiz0 = new Quiz("ok", ".+*1?", "%4G'N|+c~ZR|>PB", ".+*1?", ".+*1?");
      // Undeclared exception!
      try { 
        quizController0.add(quiz0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(quizService0).edit(any(system.model.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Quiz quiz0 = new Quiz("not found", "QuizGroups", "hyHU,}3rAm,qW&= ", "hyHU,}3rAm,qW&= ", "not found");
      Response response0 = quizController0.edit(quiz0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(quizService0).edit(any(system.model.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Quiz quiz0 = new Quiz("-<zmP]EY9GG+eQn1)", "ok", "hyHU,}3rAm,qW&= ", "hyHU,}3rAm,qW&= ", "-<zmP]EY9GG+eQn1)");
      Response response0 = quizController0.edit(quiz0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(quizService0).remove(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.remove("ok");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("QuizGroups").when(quizService0).remove(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.remove("QuizGroups");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("QuizGroups").when(quizService0).copy(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.copy("hyHU,}3rAm,qW&= ");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(quizService0).copy(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.copy("hyHU,}3rAm,qW&= ");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(quizService0).add(any(system.model.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Quiz quiz0 = new Quiz("not found", "QuizGroups", "hyHU,n}3rAm,qW&= ", "hyHU,n}3rAm,qW&= ", "not found");
      Response response0 = quizController0.add(quiz0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(quizService0).add(any(system.model.quizzes.Quiz.class));
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Quiz quiz0 = new Quiz("-<zmP]EY9GG+eQn1)", "ok", "hyHU,}3rAm,qW&= ", "hyHU,}3rAm,qW&= ", "-<zmP]EY9GG+eQn1)");
      Response response0 = quizController0.add(quiz0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      Quiz quiz0 = new Quiz((String) null, "", "", "", ")N=[dbv~Kw", (String) null, 0, (LinkedList<QuizPart>) null);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quiz0).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.get("memxo ^:<aFjM3U");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.get("QuizGroups");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      Quiz quiz0 = new Quiz("/)art: ", "/)art: ", "SY6%!", "/)art: ", "v", "/)art: ", 0, (LinkedList<QuizPart>) null);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quiz0).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.getWithQuiz("/)art: ");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.getWithQuiz("QuizGroups");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuizDao quizDao0 = new QuizDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizDao0, (Class<?>) QuizDao.class);
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      LinkedList<Quiz> linkedList1 = quizDao0.getAll();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(quizService0).getAll();
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.getAll();
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(quizService0).getAllWithCatNamesByTeacher(anyString());
      Injector.inject(quizController0, (Class<?>) system.controller.QuizController.class, "service", (Object) quizService0);
      Injector.validateBean(quizController0, (Class<?>) system.controller.QuizController.class);
      Response response0 = quizController0.getAllWithCanNames("QuizGroups");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      system.controller.QuizController quizController0 = new system.controller.QuizController();
      // Undeclared exception!
      try { 
        quizController0.getQuestionsFromQuiz("^RX]f\"o$m5|v.c:Y5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizController", e);
      }
  }
}
