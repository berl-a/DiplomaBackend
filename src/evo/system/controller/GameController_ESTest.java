/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:40:56 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.GameController;
import system.controller.service.GameService;
import system.controller.service.PlayerService;
import system.controller.service.QuizService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.Response;
import system.model.games.Player;
import system.model.questions.QuestionType;
import system.model.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameController_ESTest extends GameController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameWithActualQuiz gameWithActualQuiz1 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gameWithActualQuiz1).getQuiz();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz1).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService1 = gameController0.service;
      assertSame(gameService1, gameService0);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertEquals(1, GameService.CODE_LENGTH);
      assertNotNull(gameService1);
      
      gameController0.service = gameService1;
      // Undeclared exception!
      try { 
        gameController0.startGame("V7", ".+dyspW+*w{+F~X=Ex", 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getFullTime();
      doReturn((String) null).when(gameWithActualQuiz0).getQuiz();
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(gameService0).answerQuestion(anyString() , anyString() , anyString() , any(system.model.games.Answer.class));
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0, gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response0 = gameController0.answerQuestion("D8-2w", "H", "H", questionType0, "H");
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(response0);
      
      Response response1 = gameController0.startGame((String) null, "3~c@+.va=k1X[", 1, "3~c@+.va=k1X[");
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      // Undeclared exception!
      try { 
        gameController0.startGame("", (String) null, (-779), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string0 = "system.controller.simple_frontend_models.Response";
      QuestionType questionType0 = QuestionType.SINGLE_CHOICE;
      // Undeclared exception!
      try { 
        gameController0.answerQuestion("system.controller.simple_frontend_models.Response", "HEAD", "HEAD", questionType0, "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gameWithActualQuiz0).getQuiz();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      PlayerService playerService1 = gameController0.playerService;
      assertSame(playerService1, playerService0);
      assertNotNull(playerService1);
      
      gameController0.playerService = playerService1;
      // Undeclared exception!
      try { 
        gameController0.startGame("XUb!=Dx4sZdBcx", "?}T&v#{x[yh2 Iv&", 0, "?}T&v#{x[yh2 Iv&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).join(anyString() , anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.add("objects", "objects");
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(response0);
      
      Response response1 = gameController0.endGame("objects");
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getFullTime();
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(gameService0).answerQuestion(anyString() , anyString() , anyString() , any(system.model.games.Answer.class));
      doReturn(gameWithActualQuiz0, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).join(anyString() , anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService1 = gameController0.service;
      assertSame(gameService1, gameService0);
      assertEquals(1, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertNotNull(gameService1);
      
      gameController0.service = gameService1;
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      Response response0 = gameController0.answerQuestion("J.Uu}z`", (String) null, (String) null, questionType0, "J.Uu}z`");
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(response0);
      
      Response response1 = gameController0.add("", "");
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(gameWithActualQuiz0).getFullTime();
      doReturn(0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.setFullTime("result", 100);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(response0);
      
      QuestionType questionType0 = QuestionType.SINGLE_CHOICE;
      // Undeclared exception!
      try { 
        gameController0.answerQuestion("z%W$a`RU_dP7|oIS*?3", "error", "error", questionType0, "flJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"flJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.startGame("$VALUES", "+FIE|Aj23y", 2657, "$VALUES");
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(response0);
      
      Response response1 = gameController0.getByCode("{[$i3[");
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      Response response2 = gameController0.waitForGameStart("result", "result");
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      
      Response response3 = gameController0.getByCode("Lh2*}JVGYm9e");
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      
      Response response4 = gameController0.startGame("system.model.quizzes.QuizGroup", (String) null, 1, "");
      assertNotSame(response4, response2);
      assertNotSame(response4, response1);
      assertNotSame(response4, response0);
      assertNotSame(response4, response3);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response3));
      assertNotNull(response4);
      
      Response response5 = gameController0.getAll();
      assertNotSame(response5, response0);
      assertNotSame(response5, response4);
      assertNotSame(response5, response3);
      assertNotSame(response5, response2);
      assertNotSame(response5, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response4));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response1));
      assertNotNull(response5);
      
      Response response6 = gameController0.get("wrong teacher id");
      assertNotSame(response6, response1);
      assertNotSame(response6, response4);
      assertNotSame(response6, response2);
      assertNotSame(response6, response3);
      assertNotSame(response6, response0);
      assertNotSame(response6, response5);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response3));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response5));
      assertNotNull(response6);
      
      gameController0.service = null;
      String string0 = "wrong teacher id";
      // Undeclared exception!
      try { 
        gameController0.add("wrong teacher id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.getByCode("T$3{_Z");
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(response0);
      
      Response response1 = gameController0.waitForGameStart("EjZ/", "nok");
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      Response response2 = gameController0.startGame("lN", "game", 3291, "");
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      
      Response response3 = gameController0.setFullTime("", 100);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertNotNull(response3);
      
      Response response4 = gameController0.getByCode("1, -<");
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertNotSame(response4, response3);
      assertNotSame(response4, response2);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
      
      gameController0.service = null;
      String string0 = "not found";
      // Undeclared exception!
      try { 
        gameController0.waitForGameStart("not found", "not found");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Response response0 = gameController0.getGameInfo("Bykk4ADeR>nrM");
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(response0);
      
      Response response1 = gameController0.getAll();
      assertNotSame(response1, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      String string0 = "@@Iq\\Pvpv";
      Response response2 = gameController0.get("@@IqPvpv");
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      
      Response response3 = gameController0.waitForGameStart("", "");
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertNotSame(response3, response0);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertFalse(response3.equals((Object)response0));
      assertNotNull(response3);
      
      String string1 = "object";
      int int0 = 2642;
      Response response4 = gameController0.startGame("object", "object", 2642, "`Y\"");
      assertNotSame(response4, response1);
      assertNotSame(response4, response0);
      assertNotSame(response4, response2);
      assertNotSame(response4, response3);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response3));
      assertNotNull(response4);
      
      gameController0.service = null;
      // Undeclared exception!
      try { 
        gameController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      String string0 = "lgKk:\\c=OeC";
      Response response0 = gameController0.waitForGameStart("lgKk:c=OeC", "lgKk:c=OeC");
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(response0);
      
      GameService gameService1 = gameController0.service;
      assertSame(gameService1, gameService0);
      assertEquals(1, GameService.CODE_LENGTH);
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
      assertNotNull(gameService1);
      
      gameController0.service = gameService1;
      String string1 = "YdVi{`J~\\wq9gN";
      Response response1 = gameController0.setFullTime("YdVi{`J~wq9gN", 0L);
      assertNotSame(response1, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      Response response2 = gameController0.endGame("YdVi{`J~wq9gN");
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertNotNull(response2);
      
      Response response3 = gameController0.getAll();
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      
      String string2 = "";
      Response response4 = gameController0.get("");
      assertNotSame(response4, response2);
      assertNotSame(response4, response1);
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertNotNull(response4);
      
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.waitForGameStart("]880Bsp-bg$I", "Content_BLOB");
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(response0);
      
      Response response1 = gameController0.setFullTime("9,}0Yw", 0L);
      assertNotSame(response1, response0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      Response response2 = gameController0.add("");
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      
      Response response3 = gameController0.waitForGameStart("8S+", "8S+");
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      
      Response response4 = gameController0.waitForPlayerJoin((LinkedList<String>) null, "1e7%yjFi.", "uO,`Y*@q{-UHAVOjP!.");
      assertNotSame(response4, response3);
      assertNotSame(response4, response0);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response0));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertNotNull(response4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      
      // Undeclared exception!
      try { 
        gameController0.add((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      
      Response response0 = gameController0.startGame("Questions from group: ", "{!", 0, "");
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertNotNull(response0);
      
      Response response1 = gameController0.getAll();
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      gameController0.service = null;
      // Undeclared exception!
      try { 
        gameController0.setFullTime((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.endGame((String) null);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        gameController0.remove("627B]N4g9dXE67RT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameController gameController0 = new GameController();
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(gameController0);
      
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      
      Response response0 = gameController0.getGameInfo("");
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertNotNull(response0);
      
      Response response1 = gameController0.get("Pvkg};Z c'}*");
      assertNotSame(response1, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response1.equals((Object)response0));
      assertNotNull(response1);
      
      Response response2 = gameController0.setFullTime((String) null, 0L);
      assertNotSame(response2, response0);
      assertNotSame(response2, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertNotNull(response2);
      
      Response response3 = gameController0.endGame("C~=5|u+OTaC6XsG6|");
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(response3, response2);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response2));
      assertNotNull(response3);
      
      Response response4 = gameController0.waitForGameStart("jK)69Q\"jh8]S}", "jK)69Q\"jh8]S}");
      assertNotSame(response4, response3);
      assertNotSame(response4, response1);
      assertNotSame(response4, response2);
      assertNotSame(response4, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response4.equals((Object)response3));
      assertFalse(response4.equals((Object)response1));
      assertFalse(response4.equals((Object)response2));
      assertFalse(response4.equals((Object)response0));
      assertNotNull(response4);
      
      Response response5 = gameController0.startGame((String) null, (String) null, 1, (String) null);
      assertNotSame(response5, response2);
      assertNotSame(response5, response0);
      assertNotSame(response5, response1);
      assertNotSame(response5, response3);
      assertNotSame(response5, response4);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response5.equals((Object)response2));
      assertFalse(response5.equals((Object)response0));
      assertFalse(response5.equals((Object)response1));
      assertFalse(response5.equals((Object)response3));
      assertFalse(response5.equals((Object)response4));
      assertNotNull(response5);
      
      Response response6 = gameController0.setFullTime("'|k", 1L);
      assertNotSame(response6, response2);
      assertNotSame(response6, response5);
      assertNotSame(response6, response0);
      assertNotSame(response6, response1);
      assertNotSame(response6, response4);
      assertNotSame(response6, response3);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response6.equals((Object)response2));
      assertFalse(response6.equals((Object)response5));
      assertFalse(response6.equals((Object)response0));
      assertFalse(response6.equals((Object)response1));
      assertFalse(response6.equals((Object)response4));
      assertFalse(response6.equals((Object)response3));
      assertNotNull(response6);
      
      Response response7 = gameController0.getGameInfo("");
      assertNotSame(response7, response2);
      assertNotSame(response7, response3);
      assertNotSame(response7, response5);
      assertNotSame(response7, response4);
      assertNotSame(response7, response1);
      assertNotSame(response7, response6);
      assertNotSame(response7, response0);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response7.equals((Object)response2));
      assertFalse(response7.equals((Object)response3));
      assertFalse(response7.equals((Object)response5));
      assertFalse(response7.equals((Object)response4));
      assertFalse(response7.equals((Object)response1));
      assertFalse(response7.equals((Object)response6));
      assertFalse(response7.equals((Object)response0));
      assertNotNull(response7);
      
      Response response8 = gameController0.getGameInfo("jK)69Q\"jh8]S}");
      assertNotSame(response8, response6);
      assertNotSame(response8, response0);
      assertNotSame(response8, response2);
      assertNotSame(response8, response7);
      assertNotSame(response8, response3);
      assertNotSame(response8, response4);
      assertNotSame(response8, response5);
      assertNotSame(response8, response1);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response8.equals((Object)response6));
      assertFalse(response8.equals((Object)response0));
      assertFalse(response8.equals((Object)response2));
      assertFalse(response8.equals((Object)response7));
      assertFalse(response8.equals((Object)response3));
      assertFalse(response8.equals((Object)response4));
      assertFalse(response8.equals((Object)response5));
      assertFalse(response8.equals((Object)response1));
      assertNotNull(response8);
      
      Response response9 = gameController0.getAll();
      assertNotSame(response9, response7);
      assertNotSame(response9, response4);
      assertNotSame(response9, response6);
      assertNotSame(response9, response2);
      assertNotSame(response9, response8);
      assertNotSame(response9, response0);
      assertNotSame(response9, response5);
      assertNotSame(response9, response1);
      assertNotSame(response9, response3);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response9.equals((Object)response7));
      assertFalse(response9.equals((Object)response4));
      assertFalse(response9.equals((Object)response6));
      assertFalse(response9.equals((Object)response2));
      assertFalse(response9.equals((Object)response8));
      assertFalse(response9.equals((Object)response0));
      assertFalse(response9.equals((Object)response5));
      assertFalse(response9.equals((Object)response1));
      assertFalse(response9.equals((Object)response3));
      assertNotNull(response9);
      
      Response response10 = gameController0.get((String) null);
      assertNotSame(response10, response2);
      assertNotSame(response10, response9);
      assertNotSame(response10, response5);
      assertNotSame(response10, response8);
      assertNotSame(response10, response1);
      assertNotSame(response10, response0);
      assertNotSame(response10, response3);
      assertNotSame(response10, response4);
      assertNotSame(response10, response6);
      assertNotSame(response10, response7);
      assertEquals(1000, GameController.GAME_START_CHECK_DELAY);
      assertEquals(60000, GameController.MAX_WAITING_TIME_FOR_PLAYER_JOIN);
      assertEquals(30000, GameController.MAX_WAITING_FOR_GAME_START_TIME);
      assertFalse(response10.equals((Object)response2));
      assertFalse(response10.equals((Object)response9));
      assertFalse(response10.equals((Object)response5));
      assertFalse(response10.equals((Object)response8));
      assertFalse(response10.equals((Object)response1));
      assertFalse(response10.equals((Object)response0));
      assertFalse(response10.equals((Object)response3));
      assertFalse(response10.equals((Object)response4));
      assertFalse(response10.equals((Object)response6));
      assertFalse(response10.equals((Object)response7));
      assertNotNull(response10);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((LinkedList) null, (LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.getByCode("XFaWG9X");
      gameController0.add("system.controller.GameController");
      gameController0.startGame("", "", 1, "");
      GameService gameService1 = gameController0.service;
      gameController0.service = gameService1;
      gameController0.getGameInfo("system.controller.simple_frontend_models.Response");
      gameController0.endGame("system.controller.simple_frontend_models.Response");
      gameController0.getByCode("system.controller.simple_frontend_models.Response");
      gameController0.add("");
      gameController0.startGame("system.controller.simple_frontend_models.Response", "ok", 1, "adrx|?%)-m");
      Response response0 = gameController0.setFullTime("system.controller.simple_frontend_models.GameWithActualQuiz", 1);
      gameController0.waitForGameStart("h2LV5$oof=KuS_(41ts", (String) null);
      gameController0.endGame("KoR%EN=UQSY';]");
      gameController0.getAll();
      Response response1 = gameController0.getAll();
      assertNotSame(response1, response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.startGame("uB'H'", "system.controller.dao.PlayerDao", 100, "uB'H'");
      String string0 = "cx/^x;p{8\"xWq|Ya<";
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      gameController0.answerQuestion("fo*'H_T&* $<)Qf]j/M", "cx/^x;p{8\"xWq|Ya<", "", questionType0, "");
      GameService gameService1 = gameController0.service;
      gameController0.service = gameService1;
      gameController0.get("");
      gameController0.endGame(" of them");
      gameController0.endGame("Questions");
      gameController0.getByCode("Questions");
      String string1 = "";
      gameController0.add("", "U_72Qyp1j*Pu{dg!)0");
      // Undeclared exception!
      try { 
        gameController0.remove("U_72Qyp1j*Pu{dg!)0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null, (LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      PlayerService playerService1 = gameController0.playerService;
      gameController0.playerService = playerService1;
      PlayerService playerService2 = gameController0.playerService;
      gameController0.playerService = playerService2;
      gameController0.get("");
      gameController0.startGame("wrong teacher id", "wrong teacher id", 1, "{s~75;uC&`G9.E;&");
      gameController0.add("wrong teacher id", "{s~75;uC&`G9.E;&");
      gameController0.waitForGameStart("wrong teacher id", "{s~75;uC&`G9.E;&");
      gameController0.add("{s~75;uC&`G9.E;&", "");
      Response response0 = gameController0.setFullTime("", 1);
      gameController0.getAll();
      gameController0.getAll();
      gameController0.getAll();
      gameController0.setFullTime("{s~75;uC&`G9.E;&", 0L);
      gameController0.getGameInfo("wrong teacher id");
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      Response response1 = gameController0.answerQuestion("not found", "", "jCg]&P[`F}Tx.(I#", questionType0, "");
      assertNotSame(response1, response0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(playerService0).get(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameWithActualQuiz gameWithActualQuiz0 = mock(GameWithActualQuiz.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(gameWithActualQuiz0).getFullTime();
      doReturn((String) null).when(gameWithActualQuiz0).getName();
      doReturn(0L, 0L).when(gameWithActualQuiz0).getStartTime();
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn(gameWithActualQuiz0).when(gameService0).addGameFromQuiz(anyString());
      doReturn(gameWithActualQuiz0, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn(gameWithActualQuiz0, gameWithActualQuiz0, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).join(anyString() , anyString());
      doReturn("").when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.add("", "");
      QuizService quizService1 = gameController0.quizService;
      gameController0.quizService = quizService1;
      Response response0 = gameController0.getGameInfo("TRACE");
      gameController0.add("TRACE");
      gameController0.get("TRACE");
      gameController0.remove("TRACE");
      gameController0.getByCode("TRACE");
      gameController0.getGameInfo("@}Q{PEp-A\"Sk");
      gameController0.getGameInfo("TRACE");
      gameController0.getByCode("@}Q{PEp-A\"Sk");
      QuestionType questionType0 = QuestionType.FREE_TEXT;
      Response response1 = gameController0.answerQuestion("", "@}Q{PEp-A\"Sk", "", questionType0, "TRACE");
      assertNotSame(response1, response0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      Response response0 = gameController0.setFullTime("b;:'Q+?V", 100);
      GameController gameController1 = new GameController();
      PlayerService playerService1 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "playerService", (Object) playerService1);
      QuizService quizService1 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController1, (Class<?>) GameController.class, "quizService", (Object) quizService1);
      GameService gameService1 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService1).getWithQuiz(anyString());
      Injector.inject(gameController1, (Class<?>) GameController.class, "service", (Object) gameService1);
      Injector.validateBean(gameController1, (Class<?>) GameController.class);
      gameController1.get("name");
      QuizService quizService2 = gameController1.quizService;
      gameController0.quizService = quizService2;
      gameController0.get("@0Z$j1a;\"h");
      gameController0.getAll();
      gameController0.waitForGameStart("", (String) null);
      gameController1.startGame("", "@0Z$j1a;\"h", 30000, "");
      gameController0.waitForGameStart(";H_", (String) null);
      gameController1.waitForGameStart("object", "");
      gameController0.getGameInfo("object");
      Response response1 = gameController0.add("");
      assertNotSame(response1, response0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(gameService0).getAll();
      doReturn((GameWithActualQuiz) null).when(gameService0).getByCode(anyString());
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.waitForGameStart("<p%[aB<|[q 0@1", "eC>2brn) Wo[");
      PlayerService playerService1 = gameController0.playerService;
      gameController0.playerService = playerService1;
      GameService gameService1 = gameController0.service;
      gameController0.service = gameService1;
      gameController0.getAll();
      String string0 = "server_time";
      gameController0.getByCode("server_time");
      String string1 = "Ao!trRx]k{";
      // Undeclared exception!
      try { 
        gameController0.remove("Ao!trRx]k{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).addGameFromQuiz(anyString());
      doReturn((GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null, (GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.waitForGameStart("FREE_TEXT", "");
      gameController0.startGame("system.model.games.Player", "system.model.games.Player", (-1), "system.model.games.Player");
      gameController0.getGameInfo("not found");
      gameController0.add("ok");
      gameController0.get("");
      String string0 = null;
      // Undeclared exception!
      try { 
        gameController0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.GameController", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      doReturn((GameWithActualQuiz) null).when(gameService0).getWithQuiz(anyString());
      doReturn((String) null).when(gameService0).remove(anyString());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      gameController0.setFullTime("Questions", 1);
      // Undeclared exception!
      try { 
        gameController0.remove("/R!xQ*R0jOB__O}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GameController gameController0 = new GameController();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "playerService", (Object) playerService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "quizService", (Object) quizService0);
      GameService gameService0 = mock(GameService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameController0, (Class<?>) GameController.class, "service", (Object) gameService0);
      Injector.validateBean(gameController0, (Class<?>) GameController.class);
      // Undeclared exception!
      try { 
        gameController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
