/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 00:26:11 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.model.dao.Dao;
import system.model.dao.QuestionDao;
import system.model.dao.QuestionGroupDao;
import system.model.dao.QuizPartDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.service.QuizPartService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizPartController_ESTest extends QuizPartController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuizPartController.__CLR4_1_21sn1snjp8v56dm quizPartController___CLR4_1_21sn1snjp8v56dm0 = new QuizPartController.__CLR4_1_21sn1snjp8v56dm();
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      linkedList0.removeIf(predicate0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuizPartController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn("").when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.get("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.mysql.jdbc.Blob
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      Injector.inject(quizPartController0, (Class<?>) system.controller.QuizPartController.class, "service", (Object) quizPartService0);
      Injector.validateBean(quizPartController0, (Class<?>) system.controller.QuizPartController.class);
      // Undeclared exception!
      try { 
        quizPartController0.edit((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuizPartController.__CLR4_1_21sn1snjp8v56dm quizPartController___CLR4_1_21sn1snjp8v56dm0 = new QuizPartController.__CLR4_1_21sn1snjp8v56dm();
      QuizPartController.__CLR4_1_21sn1snjp8v56dm quizPartController___CLR4_1_21sn1snjp8v56dm1 = new QuizPartController.__CLR4_1_21sn1snjp8v56dm();
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = QuizPartController.__CLR4_1_21sn1snjp8v56dm.lambdaInc(1109, object0, 4744);
      QuizPartController.__CLR4_1_21sn1snjp8v56dm.lambdaInc(1109, object1, 2331);
      QuizPartController.__CLR4_1_21sn1snjp8v56dm quizPartController___CLR4_1_21sn1snjp8v56dm0 = new QuizPartController.__CLR4_1_21sn1snjp8v56dm();
      system.controller.QuizPartController quizPartController0 = new system.controller.QuizPartController();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
  }
}
