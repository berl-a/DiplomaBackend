/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 15:55:07 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.controller.simple_frontend_models.QuestionWithCategoryNames;
import system.model.questions.Question;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionWithCategoryNames_ESTest extends QuestionWithCategoryNames_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0);
      QuestionWithCategoryNames questionWithCategoryNames1 = new QuestionWithCategoryNames(questionWithCategoryNames0, "", "yMJR,*F1&\"C i", "<I-h:|");
      String string0 = questionWithCategoryNames1.getSubsubcategoryName();
      assertEquals("yMJR,*F1&\"C i", questionWithCategoryNames1.getSubcategoryName());
      assertEquals("<I-h:|", string0);
      assertEquals("", questionWithCategoryNames1.getCategoryName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0, "/)Ya+g1", "FREE_TEXT", (String) null);
      QuestionWithCategoryNames questionWithCategoryNames1 = new QuestionWithCategoryNames(questionWithCategoryNames0, "FREE_TEXT", "FREE_TEXT", "");
      String string0 = questionWithCategoryNames1.getSubsubcategoryName();
      assertEquals("FREE_TEXT", questionWithCategoryNames0.getSubcategoryName());
      assertEquals("FREE_TEXT", questionWithCategoryNames1.getSubcategoryName());
      assertEquals("/)Ya+g1", questionWithCategoryNames0.getCategoryName());
      assertEquals("", string0);
      assertEquals("FREE_TEXT", questionWithCategoryNames1.getCategoryName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0, "/)Ya+g1", "FREE_TEXT", (String) null);
      String string0 = questionWithCategoryNames0.getSubcategoryName();
      assertEquals("/)Ya+g1", questionWithCategoryNames0.getCategoryName());
      assertEquals("FREE_TEXT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0, "/)Ya+g1", "FREE_TEXT", (String) null);
      assertEquals("FREE_TEXT", questionWithCategoryNames0.getSubcategoryName());
      
      questionWithCategoryNames0.setSubcategoryName("");
      questionWithCategoryNames0.getSubcategoryName();
      assertEquals("/)Ya+g1", questionWithCategoryNames0.getCategoryName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0, "/)Ya+g1", "FREE_TEXT", (String) null);
      String string0 = questionWithCategoryNames0.getCategoryName();
      assertEquals("FREE_TEXT", questionWithCategoryNames0.getSubcategoryName());
      assertEquals("/)Ya+g1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0, "SINGLE_CHOICE", "SINGLE_CHOICE", "");
      assertEquals("SINGLE_CHOICE", questionWithCategoryNames0.getCategoryName());
      
      questionWithCategoryNames0.setCategoryName("");
      questionWithCategoryNames0.getCategoryName();
      assertEquals("SINGLE_CHOICE", questionWithCategoryNames0.getSubcategoryName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionWithCategoryNames questionWithCategoryNames0 = null;
      try {
        questionWithCategoryNames0 = new QuestionWithCategoryNames((Question) null, "FL-.+cXV3K", "FL-.+cXV3K", "system.model.questions.QuestionType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.questions.Question", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionWithCategoryNames questionWithCategoryNames0 = null;
      try {
        questionWithCategoryNames0 = new QuestionWithCategoryNames((Question) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.questions.Question", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getSubsubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getCategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getSubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      QuestionWithCategoryNames questionWithCategoryNames0 = new QuestionWithCategoryNames(question0);
      questionWithCategoryNames0.setSubsubcategoryName("Z|GMWO");
      assertNull(questionWithCategoryNames0.getId());
  }
}
