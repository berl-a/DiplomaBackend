/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 01:33:37 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import system.model.questions.Question;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionWithCategoryNames_ESTest extends QuestionWithCategoryNames_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = QuestionWithCategoryNames.__CLR4_1_21iy1iyjp8v55zr.lambdaInc(0, "", 0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionWithCategoryNames.__CLR4_1_21iy1iyjp8v55zr questionWithCategoryNames___CLR4_1_21iy1iyjp8v55zr0 = new QuestionWithCategoryNames.__CLR4_1_21iy1iyjp8v55zr();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames1 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(questionWithCategoryNames0, (String) null, (String) null, "CZUE=g$8?E8n0:");
      String string0 = questionWithCategoryNames1.getSubsubcategoryName();
      assertEquals("CZUE=g$8?E8n0:", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0, (String) null, "MVUam.7L&mF FP", (String) null);
      String string0 = questionWithCategoryNames0.getSubcategoryName();
      assertEquals("MVUam.7L&mF FP", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      questionWithCategoryNames0.setCategoryName("system.model.questions.QuestionType");
      String string0 = questionWithCategoryNames0.getCategoryName();
      assertEquals("system.model.questions.QuestionType", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = null;
      try {
        questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames((Question) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.questions.Question", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = null;
      try {
        questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames((Question) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.questions.Question", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getSubsubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      questionWithCategoryNames0.setCategoryName("");
      String string0 = questionWithCategoryNames0.getCategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getCategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      String string0 = questionWithCategoryNames0.getSubcategoryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames1 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(questionWithCategoryNames0, "system.model.questions.QuestionType", "", "");
      String string0 = questionWithCategoryNames1.getSubcategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      questionWithCategoryNames0.setSubsubcategoryName("");
      String string0 = questionWithCategoryNames0.getSubsubcategoryName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      system.controller.simple_frontend_models.QuestionWithCategoryNames questionWithCategoryNames0 = new system.controller.simple_frontend_models.QuestionWithCategoryNames(question0);
      questionWithCategoryNames0.setSubcategoryName(";ryHQD");
  }
}
