/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 15:56:05 GMT 2018
 */

package system.controller.simple_frontend_models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import system.controller.simple_frontend_models.Response;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Response response0 = new Response();
      response0.setResult((Map<String, Object>) null);
      Map<String, Object> map0 = response0.getResult();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Response response0 = new Response();
      response0.put("", "");
      Map<String, Object> map0 = response0.getResult();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Response response0 = new Response();
      Map<String, Object> map0 = response0.getResult();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Response response0 = new Response("L9hsc", "L9hsc");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Response response0 = new Response();
      response0.setResult((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        response0.put("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.simple_frontend_models.Response", e);
      }
  }
}
