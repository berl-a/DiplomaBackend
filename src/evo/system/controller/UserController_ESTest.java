/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 00:05:02 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.UserController;
import system.controller.dao.Dao;
import system.controller.dao.UserDao;
import system.controller.service.UserService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.Response;
import system.model.users.User;
import system.model.users.UserType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = UserController.__CLR4_1_21ud1udjp8v56gj.lambdaInc((-630), object0, (-630));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserController.__CLR4_1_21ud1udjp8v56gj userController___CLR4_1_21ud1udjp8v56gj0 = new UserController.__CLR4_1_21ud1udjp8v56gj();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      userController0.service = null;
      // Undeclared exception!
      try { 
        userController0.verify("", "g:wEp8=n5wK@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.remove("Gp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.remove("' AND ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to com.mysql.jdbc.Blob
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.getByLogin("HttpServerRequest must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.getById("not found");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.getById("Xg{4FwneT9}L;9u=16");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to com.mysql.jdbc.Blob
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0, (LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      doReturn(false).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserType userType0 = UserType.TEACHER;
      userService0.get("c/\u0001GG,Tzq*=p", userType0);
      userService0.get("oSE", userType0);
      userService0.remove("");
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.getAll();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to com.mysql.jdbc.Blob
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.edit((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.copy("newId");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.add((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      Response response0 = userController0.getById("{u4=] Ev#m");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      Response response0 = userController0.getByLogin("{u4=] Ev#m");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      // Undeclared exception!
      try { 
        userController0.verify("ie[", "id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      system.controller.UserController userController0 = new system.controller.UserController();
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Injector.inject(userController0, (Class<?>) system.controller.UserController.class, "service", (Object) userService0);
      Injector.validateBean(userController0, (Class<?>) system.controller.UserController.class);
      Response response0 = userController0.getAll();
      assertNotNull(response0);
  }
}
