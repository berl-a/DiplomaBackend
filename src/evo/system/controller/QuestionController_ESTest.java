/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 00:43:20 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.QuestionController;
import system.controller.dao.Dao;
import system.controller.dao.QuestionDao;
import system.controller.dao.QuestionGroupDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.Response;
import system.model.games.Game;
import system.model.questions.Question;
import system.model.questions.QuestionType;
import system.model.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionController_ESTest extends QuestionController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn(".a_/INy_yws[/fF@").when(questionService0).remove(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      Response response0 = questionController0.remove("eJroH");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = system.controller.QuestionController.__CLR4_1_21ni1nijp8v5676.lambdaInc(69, "TRUE", (-1117));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.QuestionController.__CLR4_1_21ni1nijp8v5676 questionController___CLR4_1_21ni1nijp8v5676_0 = new system.controller.QuestionController.__CLR4_1_21ni1nijp8v5676();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) null);
      // Undeclared exception!
      try { 
        questionController0.remove("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionService0).remove(anyString());
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.remove("error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      // Undeclared exception!
      try { 
        questionController0.getAllWithCanNames("ddng");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.getAllWithCanNames("I)kF,Z`\"2HVM9^9e");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to com.mysql.jdbc.Blob
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      IntStringBlobDatabaseEntry intStringBlobDatabaseEntry0 = mock(IntStringBlobDatabaseEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intStringBlobDatabaseEntry0).getField(anyString());
      linkedList0.add(intStringBlobDatabaseEntry0);
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.get("result");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) null);
      QuestionType questionType0 = QuestionType.MULTIPLE_CHOICE;
      Game game0 = new Game("");
      Quiz quiz0 = new Quiz();
      GameWithActualQuiz gameWithActualQuiz0 = new GameWithActualQuiz(game0, quiz0);
      LinkedList<String> linkedList0 = gameWithActualQuiz0.getPlayers();
      Question question0 = new Question(questionType0, "Jl46:R@'WGM#tum(3:", "_'rBXNQh@.S)K", "85Tt#W\"o", linkedList0, linkedList0, (LinkedList<Boolean>) null);
      // Undeclared exception!
      try { 
        questionController0.edit(question0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.QuestionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      String string0 = ".a_/INy_yws[/fF@";
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(questionController0, (Class<?>) QuestionController.class, "service", (Object) questionService0);
      Injector.validateBean(questionController0, (Class<?>) QuestionController.class);
      // Undeclared exception!
      try { 
        questionController0.get(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }
}
