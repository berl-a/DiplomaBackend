/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:44:50 GMT 2018
 */

package system.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.ResultController;
import system.controller.service.ResultService;
import system.controller.simple_frontend_models.Response;
import system.model.Result;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultController_ESTest extends ResultController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultService0).remove(anyString());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      // Undeclared exception!
      try { 
        resultController0.remove("&}+p&`=2^i= Sx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("%k)'pNv>P/Dmfge305]", "^a", (String) null).when(resultService0).grade(anyString() , anyInt() , anyString() , anyDouble());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Double double0 = new Double((-0.12345));
      resultController0.grade("%k)'pNv>P/Dmfge305]", (-938), "}DM.$1Z9Q{pGyHp|P+M", double0);
      resultController0.grade("ok", 0, "ok", double0);
      // Undeclared exception!
      try { 
        resultController0.grade("aLS<;U15_", (-1229), "tYw", double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      resultController0.service = null;
      // Undeclared exception!
      try { 
        resultController0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.ResultController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("|w", (String) null).when(resultService0).edit(any(system.model.Result.class));
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      resultController0.edit(result0);
      // Undeclared exception!
      try { 
        resultController0.edit((Result) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("QuizParts", (String) null).when(resultService0).add(any(system.model.Result.class));
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      resultController0.add(result0);
      Result result1 = mock(Result.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        resultController0.add(result1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(resultService0).edit(any(system.model.Result.class));
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Response response0 = resultController0.edit((Result) null);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(resultService0).remove(anyString());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Response response0 = resultController0.remove("");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("bZ").when(resultService0).remove(anyString());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Response response0 = resultController0.remove("system.model.questions.Question");
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("ok").when(resultService0).grade(anyString() , anyInt() , anyString() , anyDouble());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Double double0 = new Double(0);
      Response response0 = resultController0.grade(";(4B", 0, ";(4B", double0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn("nok").when(resultService0).add(any(system.model.Result.class));
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      Response response0 = resultController0.add(result0);
      assertNotNull(response0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultController resultController0 = new ResultController();
      ResultService resultService0 = mock(ResultService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(resultService0).getAllByTeacher(anyString());
      Injector.inject(resultController0, (Class<?>) ResultController.class, "service", (Object) resultService0);
      Injector.validateBean(resultController0, (Class<?>) ResultController.class);
      Response response0 = resultController0.getAll("");
      assertNotNull(response0);
  }
}
