/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 22:45:08 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuizDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuizGroupService;
import system.controller.service.QuizPartService;
import system.controller.service.QuizService;
import system.controller.simple_frontend_models.QuizWithCategoryNames;
import system.model.questions.Question;
import system.model.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizService_ESTest extends QuizService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      QuizDao quizDao1 = quizService0.dao;
      quizService0.dao = quizDao1;
      quizService0.getAll();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNamesByTeacher("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.removeQuizzesFromGroup("{+aC#]^A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      QuizDao quizDao1 = quizService0.dao;
      quizService0.dao = quizDao1;
      quizService0.dao = null;
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      QuizDao quizDao1 = quizService0.dao;
      quizService0.dao = quizDao1;
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.service.QuizService.__CLR4_1_21kj1kjjp8v565e.lambdaInc((-1944), "W7WeU.tWUIx{`'0Hz~x", (-1944));
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.copy("W7WeU.tWUIx{`'0Hz~x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        system.controller.service.QuizService.__CLR4_1_21kj1kjjp8v565e.lambdaInc(0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService$__CLR4_1_21kj1kjjp8v565e", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.get("D!*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null, (LinkedList) null, (LinkedList) null).when(quizDao0).getAll();
      doReturn((String) null).when(quizDao0).remove(anyString());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      String string0 = "*3`cb83Dw/B]}MH";
      quizService0.remove("*3`cb83Dw/B]}MH");
      quizService0.updateCached();
      String string1 = "CAT";
      // Undeclared exception!
      try { 
        quizService0.copy("CAT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      quizService0.getAll();
      String string0 = "l~02e]:)}n-ui";
      // Undeclared exception!
      try { 
        quizService0.generateRealQuestions("l~02e]:)}n-ui");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      quizService0.updateCached();
      String string0 = "}8ICQx";
      // Undeclared exception!
      try { 
        quizService0.get("}8ICQx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.get("w.`6NfGAl{5F8StlN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      String string0 = "QuizParts";
      // Undeclared exception!
      try { 
        quizService0.get("QuizParts");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.service.QuizService.__CLR4_1_21kj1kjjp8v565e quizService___CLR4_1_21kj1kjjp8v565e0 = new system.controller.service.QuizService.__CLR4_1_21kj1kjjp8v565e();
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.get("l_@#?#SQNo.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNamesByTeacher("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      quizService0.quizGroupService = null;
      String string0 = "(IF~\\$14\\+&igv";
      // Undeclared exception!
      try { 
        quizService0.get("(IF~$14+&igv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.copy("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuizService quizService0 = new QuizService();
      QuizDao quizDao0 = mock(QuizDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizDao0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "dao", (Object) quizDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "questionGroupService", (Object) questionGroupService0);
      QuizGroupService quizGroupService0 = mock(QuizGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizGroupService0).getAll();
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizGroupService", (Object) quizGroupService0);
      QuizPartService quizPartService0 = mock(QuizPartService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizService0, (Class<?>) QuizService.class, "quizPartService", (Object) quizPartService0);
      Injector.validateBean(quizService0, (Class<?>) QuizService.class);
      // Undeclared exception!
      try { 
        quizService0.getAllWithCatNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizService", e);
      }
  }
}
