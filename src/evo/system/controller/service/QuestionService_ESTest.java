/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:22:18 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuestionDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.model.questions.Question;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionService_ESTest extends QuestionService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.copy("Y=ZH,i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.getAllWithCatNamesByTeacher(". ?&20rd]]ddy]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      LinkedList<Question> linkedList0 = questionService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(question0).getId();
      String string0 = questionService0.add(question0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      doReturn("A_D1l:sCD").when(question0).getId();
      String string0 = questionService0.add(question0);
      assertEquals("A_D1l:sCD", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Question question0 = mock(Question.class, new ViolatedAssumptionAnswer());
      doReturn("").when(question0).getId();
      String string0 = questionService0.add(question0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      questionService0.dao = null;
      // Undeclared exception!
      try { 
        questionService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      questionService0.dao = null;
      // Undeclared exception!
      try { 
        questionService0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      questionService0.dao = null;
      // Undeclared exception!
      try { 
        questionService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupService0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.getAllWithCatNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      questionService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.removeQuestionsFromGroup("system.controller.service.QuestionService");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(questionDao0).getAll();
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      // Undeclared exception!
      try { 
        questionService0.add((Question) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = mock(QuestionDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionDao0).getAll();
      doReturn((String) null).when(questionDao0).remove(anyString());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      String string0 = questionService0.remove("");
      assertEquals("ok", string0);
  }
}
