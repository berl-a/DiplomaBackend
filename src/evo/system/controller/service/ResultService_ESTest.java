/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 12:15:53 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.model.dao.ResultDao;
import system.model.Result;
import system.model.games.Game;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultService_ESTest extends ResultService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultService.__CLR4_1_2j3j3jp8v550f resultService___CLR4_1_2j3j3jp8v550f0 = new ResultService.__CLR4_1_2j3j3jp8v550f();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      Double double0 = new Double(1947);
      // Undeclared exception!
      try { 
        resultService0.grade("", 1947, "", double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      // Undeclared exception!
      try { 
        resultService0.getAllByTeacher("ok");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      LinkedList<Result> linkedList0 = resultService0.getAll();
      // Undeclared exception!
      try { 
        ResultService.__CLR4_1_2j3j3jp8v550f.lambdaInc(1039, (Object) linkedList0, 1039);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService$__CLR4_1_2j3j3jp8v550f", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      String string0 = "+p";
      // Undeclared exception!
      try { 
        resultService0.get("+p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(result0).getId();
      resultService0.add(result0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      resultService0.dao = null;
      // Undeclared exception!
      try { 
        resultService0.remove("rO5(C^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      resultService0.dao = null;
      // Undeclared exception!
      try { 
        resultService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      resultService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Result>) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      doReturn("MULTIPLE_CHOICE").when(result0).getId();
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      String string0 = resultService0.add(result0);
      assertEquals("MULTIPLE_CHOICE", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      // Undeclared exception!
      try { 
        resultService0.archiveGames((LinkedList<Game>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      doReturn((String) null).when(resultDao0).remove(anyString());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      String string0 = resultService0.remove("4]");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      // Undeclared exception!
      try { 
        resultService0.grade("s?1)UOeK]A^u", 1349, "(`s2P*T", (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(resultDao0).getAll();
      doReturn((String) null).when(resultDao0).remove(anyString());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      Result result0 = mock(Result.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(result0).getId();
      String string0 = resultService0.edit(result0);
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      system.controller.service.ResultService resultService0 = new system.controller.service.ResultService();
      ResultDao resultDao0 = mock(ResultDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(resultDao0).getAll();
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "dao", (Object) resultDao0);
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "playerService", (Object) playerService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(resultService0, (Class<?>) system.controller.service.ResultService.class, "quizService", (Object) quizService0);
      Injector.validateBean(resultService0, (Class<?>) system.controller.service.ResultService.class);
      // Undeclared exception!
      try { 
        resultService0.edit((Result) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.ResultService", e);
      }
  }
}
