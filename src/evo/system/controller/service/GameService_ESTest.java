/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 23:07:52 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.service.GameService;
import system.controller.service.PlayerService;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.service.QuizService;
import system.controller.simple_frontend_models.GameWithActualQuiz;
import system.controller.simple_frontend_models.QuizWithCategoryNames;
import system.model.games.Answer;
import system.model.games.Game;
import system.model.quizzes.Quiz;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameService_ESTest extends GameService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      // Undeclared exception!
      try { 
        gameService0.getRealQuestionsForPlayer("system.controller.simple_frontend_models.GameWithActualQuiz", "D-hSn$-P872@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.GameService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      // Undeclared exception!
      try { 
        gameService0.join("Answering in game service", "Questions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.GameService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = system.controller.service.GameService.__CLR4_1_2dhdhjp8v54vz.lambdaInc(100, (Object) "h!ayX", 1427);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.service.GameService.__CLR4_1_2dhdhjp8v54vz gameService___CLR4_1_2dhdhjp8v54vz0 = new system.controller.service.GameService.__CLR4_1_2dhdhjp8v54vz();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      gameService0.addGameFromQuiz("ABCDEFHIKLMNPQSTXYZ");
      // Undeclared exception!
      try { 
        gameService0.removeByCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      // Undeclared exception!
      try { 
        gameService0.getQuestionsForPlayer((String) null, "5b\"W&O)Q^om");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.GameService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      gameService0.addGameFromQuiz((String) null);
      // Undeclared exception!
      try { 
        gameService0.getByCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      Answer answer0 = mock(Answer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gameService0.answerQuestion("ok", "oC:D;]$#XeW", "TWsJn", answer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.GameService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      // Undeclared exception!
      try { 
        gameService0.addGameFromQuiz((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.GameService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      LinkedList<Game> linkedList0 = gameService0.getAll();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      Game game0 = gameService0.get("QuestionGroups");
      assertNull(game0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      GameWithActualQuiz gameWithActualQuiz0 = gameService0.getByCode((String) null);
      assertNull(gameWithActualQuiz0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn((Quiz) null).when(quizService0).get(anyString());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      GameWithActualQuiz gameWithActualQuiz0 = gameService0.addGameFromQuiz("");
      // Undeclared exception!
      try { 
        gameService0.set("", gameWithActualQuiz0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      Quiz quiz0 = new Quiz();
      QuizWithCategoryNames quizWithCategoryNames0 = new QuizWithCategoryNames(quiz0, "ok", "^Z[~'K3mW|xV", "ok");
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      doReturn(quizWithCategoryNames0).when(quizService0).get(anyString());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      gameService0.addGameFromQuiz("oC:D;]$#XeW");
      LinkedList<Game> linkedList0 = gameService0.getAll();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      String string0 = gameService0.remove(":nNc-S|");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      LinkedList<Game> linkedList0 = gameService0.getFinishedGames();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      String string0 = gameService0.removeByCode((String) null);
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      gameService0.startGame("");
      assertEquals(1, GameService.CODE_LENGTH);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      gameService0.removeFinishedGames();
      assertEquals(100, GameService.NUMBER_OF_TRIES_TO_GENERATE_CODE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameService gameService0 = new GameService();
      PlayerService playerService0 = mock(PlayerService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "playerService", (Object) playerService0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionGroupService", (Object) questionGroupService0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "questionService", (Object) questionService0);
      QuizService quizService0 = mock(QuizService.class, new ViolatedAssumptionAnswer());
      Injector.inject(gameService0, (Class<?>) GameService.class, "quizService", (Object) quizService0);
      Injector.validateBean(gameService0, (Class<?>) GameService.class);
      GameWithActualQuiz gameWithActualQuiz0 = gameService0.getWithQuiz("^Z[~'K3mW|xV");
      assertNull(gameWithActualQuiz0);
  }
}
