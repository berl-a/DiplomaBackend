/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 22:46:30 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.UserDao;
import system.controller.service.UserService;
import system.model.users.User;
import system.model.users.UserType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = UserService.__CLR4_1_21q71q7jp8v56ap.lambdaInc(0, (Object) "^RLwPbz!+/%L0Bt", 0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserService.__CLR4_1_21q71q7jp8v56ap userService___CLR4_1_21q71q7jp8v56ap0 = new UserService.__CLR4_1_21q71q7jp8v56ap();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      userService0.getAll();
      userService0.dao = null;
      String string0 = "[x@";
      // Undeclared exception!
      try { 
        userService0.isPasswordCorrect("\" ~]tvfj=joxV;yHN", "\" ~]tvfj=joxV;yHN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      UserType userType0 = UserType.ADMINISTRATOR;
      // Undeclared exception!
      try { 
        userService0.get("system.controller.service.UserService", userType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      userService0.dao = null;
      // Undeclared exception!
      try { 
        userService0.remove("f8A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      userService0.dao = null;
      // Undeclared exception!
      try { 
        userService0.get("[x@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      userService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      // Undeclared exception!
      try { 
        userService0.copy((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.users.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      system.controller.service.UserService userService1 = new system.controller.service.UserService();
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null, (LinkedList) null, (LinkedList) null, (LinkedList) null).when(userDao1).getAll();
      Injector.inject(userService1, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService1, (Class<?>) system.controller.service.UserService.class);
      userService1.get("ok");
      // Undeclared exception!
      try { 
        userService1.addAdminToDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      // Undeclared exception!
      try { 
        userService0.edit((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.service.UserService userService0 = new system.controller.service.UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) system.controller.service.UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) system.controller.service.UserService.class);
      // Undeclared exception!
      try { 
        userService0.getById("J7fOVs,I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }
}
