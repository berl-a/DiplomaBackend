/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 23:56:57 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.dao.UserDao;
import system.controller.service.UserService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.model.users.User;
import system.model.users.UserType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User("", "", "Read ", userType0);
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(userDao1).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.isPasswordCorrect("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.isPasswordCorrect("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = system.controller.service.UserService.__CLR4_1_21q71q7jp8v56ap.lambdaInc(0, (Object) "JvYg", 2321);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.UserService.__CLR4_1_21q71q7jp8v56ap userService___CLR4_1_21q71q7jp8v56ap0 = new system.controller.service.UserService.__CLR4_1_21q71q7jp8v56ap();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = new User("", "", "", (UserType) null);
      linkedList0.add(user0);
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user1 = userService0.getById("");
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      LinkedList<User> linkedList0 = userService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.getAll();
      userService0.dao = null;
      String string0 = "[x@";
      // Undeclared exception!
      try { 
        userService0.isPasswordCorrect("\" ~]tvfj=joxV;yHN", "\" ~]tvfj=joxV;yHN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User("#YvwvQ_z", "admin", "#YvwvQ_z", userType0);
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(userDao1).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      LinkedList<User> linkedList2 = userService0.getAll();
      assertEquals(1, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = new User("Users", "Users", (UserType) null);
      linkedList0.add(user0);
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user1 = userService0.get("Users", (UserType) null);
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User("", "", "Read ", userType0);
      user0.setLogin("#YvwvQ_z");
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(userDao1).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user1 = userService0.get("#YvwvQ_z");
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User("", "", "Read ", userType0);
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1, (LinkedList) null).when(userDao1).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.copy("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.users.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.dao = null;
      // Undeclared exception!
      try { 
        userService0.remove("f8A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserType userType0 = UserType.ADMINISTRATOR;
      // Undeclared exception!
      try { 
        userService0.get("", userType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.dao = null;
      // Undeclared exception!
      try { 
        userService0.get("[x@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserType userType0 = UserType.TEACHER;
      // Undeclared exception!
      try { 
        userService0.get((String) null, userType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null, (LinkedList<Object>) null, (LinkedList<Object>) null, (LinkedList<Object>) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.addAdminToDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User("", "admin", "", userType0);
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1, linkedList1, linkedList1).when(userDao1).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      String string0 = userService0.add(user0);
      assertEquals("user_exists", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = userService0.get((String) null);
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.getById("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      LinkedList<User> linkedList1 = userDao0.getAll();
      UserType userType0 = UserType.ADMINISTRATOR;
      User user0 = new User(",", "admin", ",", userType0);
      linkedList1.add(user0);
      UserDao userDao1 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1, linkedList1, linkedList1, linkedList1, linkedList1).when(userDao1).getAll();
      doReturn("admin").when(userDao1).remove(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao1);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.addAdminToDatabase();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = new User("Users", "Users", "Users", (UserType) null);
      linkedList0.add(user0);
      UserDao userDao0 = mock(UserDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(userDao0).getAll();
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.isPasswordCorrect("Users", "Users");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserService userService0 = new UserService();
      UserDao userDao0 = new UserDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      doReturn(false).when(mySQLDatabaseService0).removeItemWhereStringFieldEqualsValue(anyString() , anyString() , anyString());
      Injector.inject(userDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(userDao0, (Class<?>) UserDao.class);
      Injector.inject(userService0, (Class<?>) UserService.class, "dao", (Object) userDao0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      String string0 = userService0.remove("N?hAAx7Y.P");
      assertEquals("ok", string0);
  }
}
