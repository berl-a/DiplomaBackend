/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 16:23:58 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuizPartDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuizPartService;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizPartService_ESTest extends QuizPartService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      QuestionGroupService questionGroupService1 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao1 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao1).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao1);
      QuestionGroupService questionGroupService2 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService2);
      QuizPart quizPart0 = mock(QuizPart.class, new ViolatedAssumptionAnswer());
      doReturn("nI(v>z=:0jg =ClnJ").when(quizPart0).getId();
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string0 = quizPartService0.add(quizPart0);
      assertEquals("nI(v>z=:0jg =ClnJ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.copy("'P{[J5~k}{}oHaU6{^F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string0 = "system.model.quizzes.QuizPart";
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("system.model.quizzes.QuizPart");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.remove("E1WgRH\"HuY");
      quizPartService0.questionGroupService = null;
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      String string0 = "SUBCAT";
      // Undeclared exception!
      try { 
        quizPartService0.get("SUBCAT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null, (LinkedList<Object>) null, (LinkedList<Object>) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuestionGroupService questionGroupService1 = quizPartService0.questionGroupService;
      quizPartService0.questionGroupService = questionGroupService1;
      quizPartService0.updateCached();
      quizPartService0.getAll();
      // Undeclared exception!
      try { 
        quizPartService0.getAllFromQuiz("p8=Ls>xw/NYuN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuizPartService quizPartService1 = new QuizPartService();
      QuizPartDao quizPartDao1 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService1, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao1);
      QuestionGroupService questionGroupService1 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService1, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService1);
      Injector.validateBean(quizPartService1, (Class<?>) QuizPartService.class);
      QuizPartDao quizPartDao2 = quizPartService1.dao;
      quizPartService0.dao = quizPartDao2;
      quizPartService0.dao = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        quizPartService0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      QuestionGroupService questionGroupService1 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao1 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null, (LinkedList) null).when(quizPartDao1).getAll();
      doReturn((String) null, (String) null).when(quizPartDao1).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao1);
      QuestionGroupService questionGroupService2 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService2);
      QuizPart quizPart0 = mock(QuizPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(quizPart0).getId();
      String string0 = quizPartService0.edit(quizPart0);
      assertEquals("ok", string0);
      
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string1 = quizPartService0.remove("2P");
      assertEquals("ok", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.get("system.controller.dao.QuestionGroupDao");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      QuizPart quizPart0 = mock(QuizPart.class, new ViolatedAssumptionAnswer());
      doReturn("nI(v>z=:0jg =ClnJ", "nI(v>z=:0jg =ClnJ").when(quizPart0).getId();
      quizPartService0.edit(quizPart0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuizPartDao quizPartDao1 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao1;
      QuizPartDao quizPartDao2 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao2;
      String string0 = "?SsM$-O@3OjQ3xhM";
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("?SsM$-O@3OjQ3xhM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.copy("vJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }
}
