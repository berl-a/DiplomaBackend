/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 22:39:57 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuizPartDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuizPartService;
import system.controller.simple_frontend_models.QuizPartWithCategoryNames;
import system.model.questions.QuestionGroup;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizPartService_ESTest extends QuizPartService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.updateCached();
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.remove("e&D6[0ji[|+]IO)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      QuestionGroupService questionGroupService1 = quizPartService0.questionGroupService;
      quizPartService0.questionGroupService = questionGroupService1;
      // Undeclared exception!
      try { 
        quizPartService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.remove("~I0tAMCP[`");
      quizPartService0.getAll();
      // Undeclared exception!
      try { 
        quizPartService0.getAllFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.getAll();
      // Undeclared exception!
      try { 
        quizPartService0.add((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go quizPartService___CLR4_1_2108108jp8v55go0 = new system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go();
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuizPartDao quizPartDao1 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao1;
      QuizPartDao quizPartDao2 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao2;
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      quizPartService0.dao = null;
      quizPartService0.questionGroupService = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        quizPartService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go quizPartService___CLR4_1_2108108jp8v55go0 = new system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go();
      system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go.profiles = quizPartService___CLR4_1_2108108jp8v55go0.profiles;
      Object object0 = system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go.lambdaInc(0, (Object) quizPartService___CLR4_1_2108108jp8v55go0, 1359);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("system.controller.service.QuizPartService");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string0 = quizPartService0.remove("system.model.questions.QuestionGroup");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.get("Wj<7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        system.controller.service.QuizPartService.__CLR4_1_2108108jp8v55go.lambdaInc(2528, (String) null, 2528);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService$__CLR4_1_2108108jp8v55go", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllWithCatNamesFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      doReturn((String) null).when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      String string0 = quizPartService0.remove("");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.add((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuestionGroupService questionGroupService1 = quizPartService0.questionGroupService;
      quizPartService0.questionGroupService = questionGroupService1;
      QuizPartDao quizPartDao1 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao1;
      // Undeclared exception!
      try { 
        quizPartService0.get("eON>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.copy("$D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      QuizPartService quizPartService1 = new QuizPartService();
      QuizPartDao quizPartDao1 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao1).getAll();
      Injector.inject(quizPartService1, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao1);
      QuestionGroupService questionGroupService1 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService1, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService1);
      Injector.validateBean(quizPartService1, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService1.get("a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.edit((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuizPartService quizPartService0 = new QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.get("-ya%+?wpZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
  }
}
