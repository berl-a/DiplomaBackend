/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 01:02:34 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.dao.QuestionDao;
import system.controller.dao.QuestionGroupDao;
import system.controller.dao.QuizPartDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.service.QuizPartService;
import system.controller.service.database.IntStringBlobDatabaseEntry;
import system.controller.service.database.MySQLDatabaseService;
import system.controller.simple_frontend_models.QuizPartWithCategoryNames;
import system.model.questions.QuestionGroup;
import system.model.questions.QuestionGroupType;
import system.model.quizzes.QuizPart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuizPartService_ESTest extends QuizPartService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuizPartService.__CLR4_1_2108108jp8v55go quizPartService___CLR4_1_2108108jp8v55go0 = new QuizPartService.__CLR4_1_2108108jp8v55go();
      Object object0 = QuizPartService.__CLR4_1_2108108jp8v55go.lambdaInc(0, (Object) quizPartService___CLR4_1_2108108jp8v55go0, 1359);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("", "GMT", 607, 0, "R0E%b", "", "", "eON>", "GMT", "");
      linkedList0.add((QuizPart) quizPartWithCategoryNames0);
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      List<QuizPart> list0 = quizPartService0.getAllFromQuiz("GMT");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("91I9kT", "2`3|P>LxyZm8[='", "", 2640, (-4160), "", "ok", "91I9kT", "system.controller.service.QuizPartService", "2`3|P>LxyZm8[='", "ok");
      linkedList0.add((QuizPart) quizPartWithCategoryNames0);
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      String string0 = quizPartService0.copy("91I9kT");
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames((String) null, (String) null, "SUBSUBCAT", 1651, 1651, "Z_E", "'name' must not be null", "Q]S+", "d=@@", "`U^Qy.4@dcI&V", "Q]S+");
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      quizPartService0.add(quizPartWithCategoryNames0);
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      LinkedList<IntStringBlobDatabaseEntry> linkedList0 = new LinkedList<IntStringBlobDatabaseEntry>();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      QuizPartDao quizPartDao1 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao1;
      quizPartService0.dao = quizPartService0.dao;
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.updateCached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = new QuizPartDao();
      MySQLDatabaseService mySQLDatabaseService0 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<IntStringBlobDatabaseEntry>) null).when(mySQLDatabaseService0).getDataFromDatabase(anyString() , anySet());
      Injector.inject(quizPartDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService0);
      Injector.validateBean(quizPartDao0, (Class<?>) QuizPartDao.class);
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionService questionService0 = new QuestionService();
      QuestionDao questionDao0 = new QuestionDao();
      MySQLDatabaseService mySQLDatabaseService1 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService1);
      Injector.validateBean(questionDao0, (Class<?>) QuestionDao.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "dao", (Object) questionDao0);
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = new QuestionGroupDao();
      MySQLDatabaseService mySQLDatabaseService2 = mock(MySQLDatabaseService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupDao0, (Class<?>) Dao.class, "databaseService", (Object) mySQLDatabaseService2);
      Injector.validateBean(questionGroupDao0, (Class<?>) QuestionGroupDao.class);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      Injector.inject(questionService0, (Class<?>) QuestionService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(questionService0, (Class<?>) QuestionService.class);
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.dao.Dao", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.getAllFromQuiz("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("91I9kT", "2`3|P>LxyZm8[='", "", 2640, (-4160), "", "ok", "91I9kT", "system.controller.service.QuizPartService", "2`3|P>LxyZm8[='", "ok");
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0, (LinkedList) null).when(quizPartDao0).getAll();
      doReturn("HqvB<AuEz").when(quizPartDao0).remove(anyString());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      LinkedList<QuestionGroup> linkedList1 = new LinkedList<QuestionGroup>();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(questionGroupService0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      quizPartService0.edit(quizPartWithCategoryNames0);
      quizPartService0.getAllWithCatNamesFromQuiz("");
      // Undeclared exception!
      try { 
        quizPartService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      QuestionGroupService questionGroupService1 = quizPartService0.questionGroupService;
      quizPartService0.questionGroupService = questionGroupService1;
      QuizPartDao quizPartDao1 = quizPartService0.dao;
      quizPartService0.dao = quizPartDao1;
      // Undeclared exception!
      try { 
        quizPartService0.get("eON>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.add((QuizPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("91I9kT", "2`3|P>LxyZm8[='", "", 2640, (-4160), "", "ok", "91I9kT", "system.controller.service.QuizPartService", "2`3|P>LxyZm8[='", "ok");
      linkedList0.add((QuizPart) quizPartWithCategoryNames0);
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      LinkedList<QuestionGroup> linkedList1 = new LinkedList<QuestionGroup>();
      QuestionGroupType questionGroupType0 = QuestionGroupType.CAT;
      QuestionGroup questionGroup0 = new QuestionGroup("", "", questionGroupType0, "u,W8yT", "u,W8yT", "'5n%isRb <@s;^Elo;");
      linkedList1.add(questionGroup0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(questionGroupService0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      List<QuizPartWithCategoryNames> list0 = quizPartService0.getAllWithCatNamesFromQuiz("");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartWithCategoryNames quizPartWithCategoryNames0 = new QuizPartWithCategoryNames("91I9kT", "2`3|P>LxyZm8[='", "", 2640, (-4160), "", "ok", "91I9kT", "system.controller.service.QuizPartService", "2`3|P>LxyZm8[='", "ok");
      linkedList0.add((QuizPart) quizPartWithCategoryNames0);
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      LinkedList<QuestionGroup> linkedList1 = new LinkedList<QuestionGroup>();
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(questionGroupService0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      List<QuizPartWithCategoryNames> list0 = quizPartService0.getAllWithCatNamesFromQuiz("");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      LinkedList<QuizPart> linkedList0 = new LinkedList<QuizPart>();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(quizPartDao0).getAll();
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      // Undeclared exception!
      try { 
        quizPartService0.copy("2`3|P>LxyZm8[='");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.model.quizzes.QuizPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      system.controller.service.QuizPartService quizPartService0 = new system.controller.service.QuizPartService();
      QuizPartDao quizPartDao0 = mock(QuizPartDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "dao", (Object) quizPartDao0);
      QuestionGroupService questionGroupService0 = mock(QuestionGroupService.class, new ViolatedAssumptionAnswer());
      Injector.inject(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class, "questionGroupService", (Object) questionGroupService0);
      Injector.validateBean(quizPartService0, (Class<?>) system.controller.service.QuizPartService.class);
      quizPartService0.dao = null;
      // Undeclared exception!
      try { 
        quizPartService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuizPartService", e);
      }
  }
}
