/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 22:48:34 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.Dao;
import system.controller.dao.QuestionGroupDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.controller.simple_frontend_models.QuestionGroupWithNumberOfQuestions;
import system.model.questions.QuestionGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupService_ESTest extends QuestionGroupService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupDao questionGroupDao1 = questionGroupService0.dao;
      assertSame(questionGroupDao1, questionGroupDao0);
      assertFalse(Dao.SQLITE_NOT_MYSQL);
      assertNotNull(questionGroupDao1);
      
      questionGroupService0.dao = questionGroupDao1;
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("8-f*u/ b]G{Dm-", "8-f*u/ b]G{Dm-", "8-f*u/ b]G{Dm-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionService questionService1 = questionGroupService0.questionService;
      assertSame(questionService1, questionService0);
      assertNotNull(questionService1);
      
      questionGroupService0.questionService = questionService1;
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("", "Questions from group: ", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      LinkedList<QuestionGroup> linkedList0 = null;
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree("<y-m_Q<]v2Ig/Cfm", "]8,!eondur|onR5KbT", "]8,!eondur|onR5KbT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      String string0 = ":B+=h8_]?-`nLb\\0/";
      // Undeclared exception!
      try { 
        questionGroupService0.getAll(":B+=h8_]?-`nLb\u0000/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions("9FlX15");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions("xDIobpT*N|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("Questions from group: ", "ok", "Questions from group: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("", "", "%7fug(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups((String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.rename("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("uj~ax`}$,dUS~5S", "kGx|4^", "kGx|4^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn.lambdaInc(2033, (QuestionGroup) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService$__CLR4_1_2amamjp8v54pn", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn questionGroupService___CLR4_1_2amamjp8v54pn0 = new system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn();
      assertNotNull(questionGroupService___CLR4_1_2amamjp8v54pn0);
      
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      LinkedList<QuestionGroup> linkedList0 = questionGroupService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      doReturn((String) null).when(questionGroupDao0).remove(anyString());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      String string0 = questionGroupService0.remove("");
      assertEquals("ok", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.get("Rzc}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.updateCached();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      assertNotNull(questionGroupService0);
      
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.rename("nok", "nok");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("Questions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupDao questionGroupDao1 = questionGroupService0.dao;
      questionGroupService0.dao = questionGroupDao1;
      // Undeclared exception!
      try { 
        questionGroupService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.get("xbqoapM@jJa o!D,V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      doReturn((String) null).when(questionGroupDao0).remove(anyString());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      String string0 = questionGroupService0.remove("I~b~");
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAll(":JU<w@7~+1dqsP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.edit((QuestionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionService questionService1 = questionGroupService0.questionService;
      questionGroupService0.questionService = questionService1;
      String string0 = "QuestionGroups";
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("QuestionGroups");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        system.controller.service.QuestionGroupService.__CLR4_1_2amamjp8v54pn.lambdaInc(0, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService$__CLR4_1_2amamjp8v54pn", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions("9FlX15");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao0).getAll();
      doReturn((String) null).when(questionGroupDao0).remove(anyString());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.remove("n% ]");
      String string0 = null;
      // Undeclared exception!
      try { 
        questionGroupService0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionGroupService questionGroupService1 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao1 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService1, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao1);
      QuestionService questionService1 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService1).getAll();
      Injector.inject(questionGroupService1, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService1);
      Injector.validateBean(questionGroupService1, (Class<?>) QuestionGroupService.class);
      QuestionService questionService2 = questionGroupService1.questionService;
      questionGroupService0.questionService = questionService2;
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("XX y?F#wI", "", "XX y?F#wI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      QuestionService questionService1 = questionGroupService0.questionService;
      questionGroupService0.questionService = questionService1;
      String string0 = null;
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }
}
