/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 15:59:19 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.QuestionGroupDao;
import system.controller.service.QuestionGroupService;
import system.controller.service.QuestionService;
import system.model.questions.QuestionGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionGroupService_ESTest extends QuestionGroupService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("j_F)*7", "j_F)*7", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.get("tvg4gz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups("", (String) null, "6e:~hcT9SP\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      String string0 = "";
      // Undeclared exception!
      try { 
        questionGroupService0.rename("", "Id_STRING");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.getAll();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.dao = null;
      // Undeclared exception!
      try { 
        questionGroupService0.remove("K*_ZJvv1;J\u0002]wyoo/-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.dao = null;
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree("25WzV%Hy8W ^n", "system.controller.dao.Dao", "system.controller.dao.Dao");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroupsFree((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getNumberOfQuestions("HxPW`:1", (String) null, "I3XJxqcN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionService0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getQuestionsFromGroups((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      questionGroupService0.updateCached();
      // Undeclared exception!
      try { 
        questionGroupService0.getAll("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.getAllWithNumberOfQuestions(" of them");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionGroupService questionGroupService0 = new QuestionGroupService();
      QuestionGroupDao questionGroupDao0 = mock(QuestionGroupDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(questionGroupDao0).getAll();
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "dao", (Object) questionGroupDao0);
      QuestionService questionService0 = mock(QuestionService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionGroupService0, (Class<?>) QuestionGroupService.class, "questionService", (Object) questionService0);
      Injector.validateBean(questionGroupService0, (Class<?>) QuestionGroupService.class);
      // Undeclared exception!
      try { 
        questionGroupService0.edit((QuestionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.QuestionGroupService", e);
      }
  }
}
