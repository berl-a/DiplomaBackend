/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 03 22:44:01 GMT 2018
 */

package system.controller.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import system.controller.dao.PlayerDao;
import system.controller.service.PlayerService;
import system.model.games.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayerService_ESTest extends PlayerService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = PlayerService.__CLR4_1_214n14njp8v55p8.lambdaInc((-2214), "", (-2214));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlayerService.__CLR4_1_214n14njp8v55p8 playerService___CLR4_1_214n14njp8v55p8_0 = new PlayerService.__CLR4_1_214n14njp8v55p8();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      system.controller.service.PlayerService playerService0 = new system.controller.service.PlayerService();
      PlayerDao playerDao0 = mock(PlayerDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(playerDao0).getPlayers();
      Injector.inject(playerService0, (Class<?>) system.controller.service.PlayerService.class, "dao", (Object) playerDao0);
      Injector.validateBean(playerService0, (Class<?>) system.controller.service.PlayerService.class);
      LinkedList<Player> linkedList0 = playerService0.getAll();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      system.controller.service.PlayerService playerService0 = new system.controller.service.PlayerService();
      PlayerDao playerDao0 = mock(PlayerDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null, (LinkedList) null).when(playerDao0).getPlayers();
      Injector.inject(playerService0, (Class<?>) system.controller.service.PlayerService.class, "dao", (Object) playerDao0);
      Injector.validateBean(playerService0, (Class<?>) system.controller.service.PlayerService.class);
      playerService0.getAll();
      // Undeclared exception!
      try { 
        playerService0.get("LsJB-)c=yiMA|=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.PlayerService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      system.controller.service.PlayerService playerService0 = new system.controller.service.PlayerService();
      PlayerDao playerDao0 = mock(PlayerDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(playerService0, (Class<?>) system.controller.service.PlayerService.class, "dao", (Object) playerDao0);
      Injector.validateBean(playerService0, (Class<?>) system.controller.service.PlayerService.class);
      PlayerDao playerDao1 = playerService0.dao;
      playerService0.dao = playerDao1;
      playerService0.dao = null;
      // Undeclared exception!
      try { 
        playerService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.PlayerService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      system.controller.service.PlayerService playerService0 = new system.controller.service.PlayerService();
      PlayerDao playerDao0 = mock(PlayerDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(playerDao0).getPlayers();
      Injector.inject(playerService0, (Class<?>) system.controller.service.PlayerService.class, "dao", (Object) playerDao0);
      Injector.validateBean(playerService0, (Class<?>) system.controller.service.PlayerService.class);
      // Undeclared exception!
      try { 
        playerService0.addPlayer((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.PlayerService", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      system.controller.service.PlayerService playerService0 = new system.controller.service.PlayerService();
      PlayerDao playerDao0 = mock(PlayerDao.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList) null).when(playerDao0).getPlayers();
      Injector.inject(playerService0, (Class<?>) system.controller.service.PlayerService.class, "dao", (Object) playerDao0);
      Injector.validateBean(playerService0, (Class<?>) system.controller.service.PlayerService.class);
      // Undeclared exception!
      try { 
        playerService0.removePlayer("FP(u)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("system.controller.service.PlayerService", e);
      }
  }
}
